package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// NodeInput node input
// swagger:model node-input
type NodeInput struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// alive
	Alive bool `json:"alive,omitempty"`

	// allocated
	Allocated bool `json:"allocated,omitempty"`

	// arch
	Arch string `json:"arch,omitempty"`

	// bootenv
	Bootenv string `json:"bootenv,omitempty"`

	// deployment id
	DeploymentID int64 `json:"deployment_id,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// discovery
	Discovery interface{} `json:"discovery,omitempty"`

	// hint
	Hint interface{} `json:"hint,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// name
	// Max Length: 255
	Name strfmt.Hostname `json:"name,omitempty"`

	// node control address
	NodeControlAddress string `json:"node-control-address,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// order
	Order int64 `json:"order,omitempty"`

	// os family
	OsFamily string `json:"os_family,omitempty"`

	// profiles
	Profiles []string `json:"profiles,omitempty"`

	// provider id
	ProviderID int64 `json:"provider_id,omitempty"`

	// quirks
	Quirks []string `json:"quirks,omitempty"`

	// system
	System bool `json:"system,omitempty"`

	// target role id
	TargetRoleID int64 `json:"target_role_id,omitempty"`

	// uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`

	// variant
	Variant string `json:"variant,omitempty"`
}

// Validate validates this node input
func (m *NodeInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuirks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeInput) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *NodeInput) validateProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	return nil
}

func (m *NodeInput) validateQuirks(formats strfmt.Registry) error {

	if swag.IsZero(m.Quirks) { // not required
		return nil
	}

	return nil
}
