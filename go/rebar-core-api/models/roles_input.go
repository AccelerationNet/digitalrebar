package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// RolesInput roles input
// swagger:model roles-input
type RolesInput struct {

	// abstract
	Abstract bool `json:"abstract,omitempty"`

	// attribs
	Attribs []string `json:"attribs,omitempty"`

	// barclamp id
	BarclampID int64 `json:"barclamp_id,omitempty"`

	// bootstrap
	Bootstrap bool `json:"bootstrap,omitempty"`

	// cluster
	Cluster bool `json:"cluster,omitempty"`

	// cohort
	Cohort int64 `json:"cohort,omitempty"`

	// conflicts
	Conflicts []string `json:"conflicts,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// destructive
	Destructive bool `json:"destructive,omitempty"`

	// discovery
	Discovery bool `json:"discovery,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// implicit
	Implicit bool `json:"implicit,omitempty"`

	// jig name
	JigName string `json:"jig_name,omitempty"`

	// leaverunlog
	Leaverunlog bool `json:"leaverunlog,omitempty"`

	// library
	Library bool `json:"library,omitempty"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// milestone
	Milestone bool `json:"milestone,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// powersave
	Powersave bool `json:"powersave,omitempty"`

	// preceeds
	Preceeds []string `json:"preceeds,omitempty"`

	// provides
	Provides []string `json:"provides,omitempty"`

	// replace node icon
	ReplaceNodeIcon bool `json:"replace_node_icon,omitempty"`

	// requires
	Requires []string `json:"requires,omitempty"`

	// service
	Service bool `json:"service,omitempty"`

	// wanted attribs
	WantedAttribs []string `json:"wanted_attribs,omitempty"`
}

// Validate validates this roles input
func (m *RolesInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttribs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConflicts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePreceeds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProvides(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRequires(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWantedAttribs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RolesInput) validateAttribs(formats strfmt.Registry) error {

	if swag.IsZero(m.Attribs) { // not required
		return nil
	}

	return nil
}

func (m *RolesInput) validateConflicts(formats strfmt.Registry) error {

	if swag.IsZero(m.Conflicts) { // not required
		return nil
	}

	return nil
}

func (m *RolesInput) validatePreceeds(formats strfmt.Registry) error {

	if swag.IsZero(m.Preceeds) { // not required
		return nil
	}

	return nil
}

func (m *RolesInput) validateProvides(formats strfmt.Registry) error {

	if swag.IsZero(m.Provides) { // not required
		return nil
	}

	return nil
}

func (m *RolesInput) validateRequires(formats strfmt.Registry) error {

	if swag.IsZero(m.Requires) { // not required
		return nil
	}

	return nil
}

func (m *RolesInput) validateWantedAttribs(formats strfmt.Registry) error {

	if swag.IsZero(m.WantedAttribs) { // not required
		return nil
	}

	return nil
}
