package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// AttribInput attrib input
// swagger:model attrib-input
type AttribInput struct {

	// barclamp id
	BarclampID int64 `json:"barclamp_id,omitempty"`

	// default
	Default *AttribInputDefault `json:"default,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// map
	Map string `json:"map,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// order
	Order int64 `json:"order,omitempty"`

	// role id
	RoleID int64 `json:"role_id,omitempty"`

	// schema
	Schema interface{} `json:"schema,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// value
	Value []interface{} `json:"value,omitempty"`

	// writable
	Writable bool `json:"writable,omitempty"`
}

// Validate validates this attrib input
func (m *AttribInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefault(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttribInput) validateDefault(formats strfmt.Registry) error {

	if swag.IsZero(m.Default) { // not required
		return nil
	}

	if m.Default != nil {

		if err := m.Default.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *AttribInput) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if err := m.Value.Validate(formats); err != nil {
		return err
	}

	return nil
}

// AttribInputDefault attrib input default
// swagger:model AttribInputDefault
type AttribInputDefault struct {

	// value
	Value interface{} `json:"value,omitempty"`
}

// Validate validates this attrib input default
func (m *AttribInputDefault) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
