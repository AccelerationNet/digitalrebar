package hammers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hammers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hammers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEHammer deletes hammer
*/
func (a *Client) DELETEHammer(params *DELETEHammerParams) (*DELETEHammerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEHammerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-hammer",
		Method:             "DELETE",
		PathPattern:        "/hammers/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEHammerReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEHammerNoContent), nil

}

/*
GETHammer gets hammer
*/
func (a *Client) GETHammer(params *GETHammerParams) (*GETHammerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETHammerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-hammer",
		Method:             "GET",
		PathPattern:        "/hammers/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETHammerReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETHammerOK), nil

}

/*
LISTHammers lists hammers
*/
func (a *Client) LISTHammers(params *LISTHammersParams) (*LISTHammersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTHammersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-hammers",
		Method:             "GET",
		PathPattern:        "/hammers",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTHammersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTHammersOK), nil

}

/*
POSTHammer creates hammer
*/
func (a *Client) POSTHammer(params *POSTHammerParams) (*POSTHammerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTHammerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-hammer",
		Method:             "POST",
		PathPattern:        "/hammers",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTHammerReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTHammerCreated), nil

}

/*
PUTHammer updates hammer
*/
func (a *Client) PUTHammer(params *PUTHammerParams) (*PUTHammerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTHammerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-hammer",
		Method:             "PUT",
		PathPattern:        "/hammers/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTHammerReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTHammerOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
