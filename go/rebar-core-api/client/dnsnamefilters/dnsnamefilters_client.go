package dnsnamefilters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dnsnamefilters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dnsnamefilters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEDnsnamefilters deletes DNS name filters
*/
func (a *Client) DELETEDnsnamefilters(params *DELETEDnsnamefiltersParams) (*DELETEDnsnamefiltersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEDnsnamefiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-dnsnamefilters",
		Method:             "DELETE",
		PathPattern:        "/dnsnamefilters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEDnsnamefiltersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEDnsnamefiltersNoContent), nil

}

/*
GETDnsnamefilters gets DNS name filters
*/
func (a *Client) GETDnsnamefilters(params *GETDnsnamefiltersParams) (*GETDnsnamefiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDnsnamefiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-dnsnamefilters",
		Method:             "GET",
		PathPattern:        "/dnsnamefilters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDnsnamefiltersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETDnsnamefiltersOK), nil

}

/*
LISTDnsnamefilters lists dnsnamefilters
*/
func (a *Client) LISTDnsnamefilters(params *LISTDnsnamefiltersParams) (*LISTDnsnamefiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTDnsnamefiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-dnsnamefilters",
		Method:             "GET",
		PathPattern:        "/dnsnamefilters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTDnsnamefiltersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTDnsnamefiltersOK), nil

}

/*
POSTDnsnamefilters creates DNS name filters
*/
func (a *Client) POSTDnsnamefilters(params *POSTDnsnamefiltersParams) (*POSTDnsnamefiltersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTDnsnamefiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-dnsnamefilters",
		Method:             "POST",
		PathPattern:        "/dnsnamefilters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTDnsnamefiltersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTDnsnamefiltersCreated), nil

}

/*
PUTDnsnamefilters updates DNS name filters
*/
func (a *Client) PUTDnsnamefilters(params *PUTDnsnamefiltersParams) (*PUTDnsnamefiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTDnsnamefiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-dnsnamefilters",
		Method:             "PUT",
		PathPattern:        "/dnsnamefilters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTDnsnamefiltersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTDnsnamefiltersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
