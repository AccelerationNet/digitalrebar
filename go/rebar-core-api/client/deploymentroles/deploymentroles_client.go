package deploymentroles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new deploymentroles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deploymentroles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEDeploymentroles deletes deploymentroles
*/
func (a *Client) DELETEDeploymentroles(params *DELETEDeploymentrolesParams) (*DELETEDeploymentrolesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEDeploymentrolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-deploymentroles",
		Method:             "DELETE",
		PathPattern:        "/deploymentroles/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEDeploymentrolesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEDeploymentrolesNoContent), nil

}

/*
GETDeploymentroles gets deploymentroles
*/
func (a *Client) GETDeploymentroles(params *GETDeploymentrolesParams) (*GETDeploymentrolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDeploymentrolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-deploymentroles",
		Method:             "GET",
		PathPattern:        "/deploymentroles/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDeploymentrolesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETDeploymentrolesOK), nil

}

/*
LISTDeploymentroles lists deploymentroles
*/
func (a *Client) LISTDeploymentroles(params *LISTDeploymentrolesParams) (*LISTDeploymentrolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTDeploymentrolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-deploymentroles",
		Method:             "GET",
		PathPattern:        "/deploymentroles",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTDeploymentrolesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTDeploymentrolesOK), nil

}

/*
POSTDeploymentroles creates deploymentroles
*/
func (a *Client) POSTDeploymentroles(params *POSTDeploymentrolesParams) (*POSTDeploymentrolesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTDeploymentrolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-deploymentroles",
		Method:             "POST",
		PathPattern:        "/deploymentroles",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTDeploymentrolesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTDeploymentrolesCreated), nil

}

/*
PUTDeploymentroles updates deploymentroles
*/
func (a *Client) PUTDeploymentroles(params *PUTDeploymentrolesParams) (*PUTDeploymentrolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTDeploymentrolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-deploymentroles",
		Method:             "PUT",
		PathPattern:        "/deploymentroles/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTDeploymentrolesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTDeploymentrolesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
