package networkranges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new networkranges API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networkranges API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETENetworkrange deletes network range
*/
func (a *Client) DELETENetworkrange(params *DELETENetworkrangeParams) (*DELETENetworkrangeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETENetworkrangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-networkrange",
		Method:             "DELETE",
		PathPattern:        "/networkranges/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETENetworkrangeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETENetworkrangeNoContent), nil

}

/*
GETNetworkrange gets network range
*/
func (a *Client) GETNetworkrange(params *GETNetworkrangeParams) (*GETNetworkrangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNetworkrangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-networkrange",
		Method:             "GET",
		PathPattern:        "/networkranges/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNetworkrangeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETNetworkrangeOK), nil

}

/*
LISTNetworkranges lists networkranges
*/
func (a *Client) LISTNetworkranges(params *LISTNetworkrangesParams) (*LISTNetworkrangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTNetworkrangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-networkranges",
		Method:             "GET",
		PathPattern:        "/networkranges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTNetworkrangesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTNetworkrangesOK), nil

}

/*
POSTNetworkrange creates network range
*/
func (a *Client) POSTNetworkrange(params *POSTNetworkrangeParams) (*POSTNetworkrangeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTNetworkrangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-networkrange",
		Method:             "POST",
		PathPattern:        "/networkranges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTNetworkrangeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTNetworkrangeCreated), nil

}

/*
PUTNetworkrange updates network range
*/
func (a *Client) PUTNetworkrange(params *PUTNetworkrangeParams) (*PUTNetworkrangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTNetworkrangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-networkrange",
		Method:             "PUT",
		PathPattern:        "/networkranges/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTNetworkrangeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTNetworkrangeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
