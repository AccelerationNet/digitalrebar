package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new capabilities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for capabilities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETECapabilities deletes capabilities
*/
func (a *Client) DELETECapabilities(params *DELETECapabilitiesParams) (*DELETECapabilitiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETECapabilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-capabilities",
		Method:             "DELETE",
		PathPattern:        "/capabilities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETECapabilitiesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETECapabilitiesNoContent), nil

}

/*
GETCapabilities gets capabilities
*/
func (a *Client) GETCapabilities(params *GETCapabilitiesParams) (*GETCapabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETCapabilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-capabilities",
		Method:             "GET",
		PathPattern:        "/capabilities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETCapabilitiesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETCapabilitiesOK), nil

}

/*
LISTCapabilities lists capabilities
*/
func (a *Client) LISTCapabilities(params *LISTCapabilitiesParams) (*LISTCapabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTCapabilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-capabilities",
		Method:             "GET",
		PathPattern:        "/capabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTCapabilitiesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTCapabilitiesOK), nil

}

/*
POSTCapabilities creates capabilities
*/
func (a *Client) POSTCapabilities(params *POSTCapabilitiesParams) (*POSTCapabilitiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTCapabilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-capabilities",
		Method:             "POST",
		PathPattern:        "/capabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTCapabilitiesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTCapabilitiesCreated), nil

}

/*
PUTCapabilities updates capabilities
*/
func (a *Client) PUTCapabilities(params *PUTCapabilitiesParams) (*PUTCapabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTCapabilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-capabilities",
		Method:             "PUT",
		PathPattern:        "/capabilities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTCapabilitiesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTCapabilitiesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
