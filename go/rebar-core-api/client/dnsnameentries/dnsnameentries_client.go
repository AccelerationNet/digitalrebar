package dnsnameentries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dnsnameentries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dnsnameentries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEDnsnameentries deletes DNS name entries
*/
func (a *Client) DELETEDnsnameentries(params *DELETEDnsnameentriesParams) (*DELETEDnsnameentriesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEDnsnameentriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-dnsnameentries",
		Method:             "DELETE",
		PathPattern:        "/dnsnameentries/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEDnsnameentriesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEDnsnameentriesNoContent), nil

}

/*
GETDnsnameentries gets DNS name entries
*/
func (a *Client) GETDnsnameentries(params *GETDnsnameentriesParams) (*GETDnsnameentriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDnsnameentriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-dnsnameentries",
		Method:             "GET",
		PathPattern:        "/dnsnameentries/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDnsnameentriesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETDnsnameentriesOK), nil

}

/*
LISTDnsnameentries lists dnsnameentries
*/
func (a *Client) LISTDnsnameentries(params *LISTDnsnameentriesParams) (*LISTDnsnameentriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTDnsnameentriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-dnsnameentries",
		Method:             "GET",
		PathPattern:        "/dnsnameentries",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTDnsnameentriesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTDnsnameentriesOK), nil

}

/*
POSTDnsnameentries creates DNS name entries
*/
func (a *Client) POSTDnsnameentries(params *POSTDnsnameentriesParams) (*POSTDnsnameentriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTDnsnameentriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-dnsnameentries",
		Method:             "POST",
		PathPattern:        "/dnsnameentries",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTDnsnameentriesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTDnsnameentriesCreated), nil

}

/*
PUTDnsnameentries updates DNS name entries
*/
func (a *Client) PUTDnsnameentries(params *PUTDnsnameentriesParams) (*PUTDnsnameentriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTDnsnameentriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-dnsnameentries",
		Method:             "PUT",
		PathPattern:        "/dnsnameentries/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTDnsnameentriesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTDnsnameentriesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
