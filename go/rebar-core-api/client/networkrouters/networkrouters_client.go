package networkrouters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new networkrouters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networkrouters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETENetworkrouter deletes network router
*/
func (a *Client) DELETENetworkrouter(params *DELETENetworkrouterParams) (*DELETENetworkrouterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETENetworkrouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-networkrouter",
		Method:             "DELETE",
		PathPattern:        "/networkrouters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETENetworkrouterReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETENetworkrouterNoContent), nil

}

/*
GETNetworkrouter gets network router
*/
func (a *Client) GETNetworkrouter(params *GETNetworkrouterParams) (*GETNetworkrouterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNetworkrouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-networkrouter",
		Method:             "GET",
		PathPattern:        "/networkrouters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNetworkrouterReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETNetworkrouterOK), nil

}

/*
LISTNetworkrouters lists networkrouters
*/
func (a *Client) LISTNetworkrouters(params *LISTNetworkroutersParams) (*LISTNetworkroutersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTNetworkroutersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-networkrouters",
		Method:             "GET",
		PathPattern:        "/networkrouters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTNetworkroutersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTNetworkroutersOK), nil

}

/*
POSTNetworkrouter creates network router
*/
func (a *Client) POSTNetworkrouter(params *POSTNetworkrouterParams) (*POSTNetworkrouterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTNetworkrouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-networkrouter",
		Method:             "POST",
		PathPattern:        "/networkrouters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTNetworkrouterReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTNetworkrouterCreated), nil

}

/*
PUTNetworkrouter updates network router
*/
func (a *Client) PUTNetworkrouter(params *PUTNetworkrouterParams) (*PUTNetworkrouterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTNetworkrouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-networkrouter",
		Method:             "PUT",
		PathPattern:        "/networkrouters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTNetworkrouterReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTNetworkrouterOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
