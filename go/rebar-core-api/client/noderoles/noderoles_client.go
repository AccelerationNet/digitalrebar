package noderoles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new noderoles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for noderoles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETENoderole deletes node role
*/
func (a *Client) DELETENoderole(params *DELETENoderoleParams) (*DELETENoderoleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETENoderoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-noderole",
		Method:             "DELETE",
		PathPattern:        "/noderoles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETENoderoleReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETENoderoleNoContent), nil

}

/*
GETNoderole gets node role
*/
func (a *Client) GETNoderole(params *GETNoderoleParams) (*GETNoderoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNoderoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-noderole",
		Method:             "GET",
		PathPattern:        "/noderoles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNoderoleReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETNoderoleOK), nil

}

/*
LISTNoderoles lists noderoles
*/
func (a *Client) LISTNoderoles(params *LISTNoderolesParams) (*LISTNoderolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTNoderolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-noderoles",
		Method:             "GET",
		PathPattern:        "/noderoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTNoderolesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTNoderolesOK), nil

}

/*
POSTNoderole creates node role
*/
func (a *Client) POSTNoderole(params *POSTNoderoleParams) (*POSTNoderoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTNoderoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-noderole",
		Method:             "POST",
		PathPattern:        "/noderoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTNoderoleReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTNoderoleCreated), nil

}

/*
PUTNoderole updates node role
*/
func (a *Client) PUTNoderole(params *PUTNoderoleParams) (*PUTNoderoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTNoderoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-noderole",
		Method:             "PUT",
		PathPattern:        "/noderoles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTNoderoleReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTNoderoleOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
