package barclamps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new barclamps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for barclamps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEBarclamp deletes barclamp
*/
func (a *Client) DELETEBarclamp(params *DELETEBarclampParams) (*DELETEBarclampNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEBarclampParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-barclamp",
		Method:             "DELETE",
		PathPattern:        "/barclamps/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEBarclampReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEBarclampNoContent), nil

}

/*
GETBarclamp gets barclamp
*/
func (a *Client) GETBarclamp(params *GETBarclampParams) (*GETBarclampOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETBarclampParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-barclamp",
		Method:             "GET",
		PathPattern:        "/barclamps/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETBarclampReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETBarclampOK), nil

}

/*
LISTBarclamps lists barclamps
*/
func (a *Client) LISTBarclamps(params *LISTBarclampsParams) (*LISTBarclampsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTBarclampsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-barclamps",
		Method:             "GET",
		PathPattern:        "/barclamps",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTBarclampsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTBarclampsOK), nil

}

/*
POSTBarclamp creates barclamp
*/
func (a *Client) POSTBarclamp(params *POSTBarclampParams) (*POSTBarclampCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTBarclampParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-barclamp",
		Method:             "POST",
		PathPattern:        "/barclamps",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTBarclampReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTBarclampCreated), nil

}

/*
PUTBarclamp updates barclamp
*/
func (a *Client) PUTBarclamp(params *PUTBarclampParams) (*PUTBarclampOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTBarclampParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-barclamp",
		Method:             "PUT",
		PathPattern:        "/barclamps/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTBarclampReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTBarclampOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
