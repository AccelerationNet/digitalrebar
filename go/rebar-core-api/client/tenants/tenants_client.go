package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tenants API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tenants API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETETenant deletes tenant
*/
func (a *Client) DELETETenant(params *DELETETenantParams) (*DELETETenantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETETenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-tenant",
		Method:             "DELETE",
		PathPattern:        "/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETETenantReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETETenantNoContent), nil

}

/*
GETTenant gets tenant
*/
func (a *Client) GETTenant(params *GETTenantParams) (*GETTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-tenant",
		Method:             "GET",
		PathPattern:        "/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETTenantReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETTenantOK), nil

}

/*
LISTTenants lists tenants
*/
func (a *Client) LISTTenants(params *LISTTenantsParams) (*LISTTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTTenantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-tenants",
		Method:             "GET",
		PathPattern:        "/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTTenantsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTTenantsOK), nil

}

/*
POSTTenant creates tenant
*/
func (a *Client) POSTTenant(params *POSTTenantParams) (*POSTTenantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-tenant",
		Method:             "POST",
		PathPattern:        "/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTTenantReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTTenantCreated), nil

}

/*
PUTTenant updates tenant
*/
func (a *Client) PUTTenant(params *PUTTenantParams) (*PUTTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-tenant",
		Method:             "PUT",
		PathPattern:        "/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTTenantReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTTenantOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
