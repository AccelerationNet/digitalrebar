package networkallocations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new networkallocations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networkallocations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETENetworkallocation deletes network allocation
*/
func (a *Client) DELETENetworkallocation(params *DELETENetworkallocationParams) (*DELETENetworkallocationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETENetworkallocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-networkallocation",
		Method:             "DELETE",
		PathPattern:        "/networkallocations/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETENetworkallocationReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETENetworkallocationNoContent), nil

}

/*
GETNetworkallocation gets network allocation
*/
func (a *Client) GETNetworkallocation(params *GETNetworkallocationParams) (*GETNetworkallocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNetworkallocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-networkallocation",
		Method:             "GET",
		PathPattern:        "/networkallocations/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNetworkallocationReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETNetworkallocationOK), nil

}

/*
LISTNetworkallocations lists networkallocations
*/
func (a *Client) LISTNetworkallocations(params *LISTNetworkallocationsParams) (*LISTNetworkallocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTNetworkallocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-networkallocations",
		Method:             "GET",
		PathPattern:        "/networkallocations",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTNetworkallocationsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTNetworkallocationsOK), nil

}

/*
POSTNetworkallocation creates network allocation
*/
func (a *Client) POSTNetworkallocation(params *POSTNetworkallocationParams) (*POSTNetworkallocationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTNetworkallocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-networkallocation",
		Method:             "POST",
		PathPattern:        "/networkallocations",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTNetworkallocationReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTNetworkallocationCreated), nil

}

/*
PUTNetworkallocation updates network allocation
*/
func (a *Client) PUTNetworkallocation(params *PUTNetworkallocationParams) (*PUTNetworkallocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTNetworkallocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-networkallocation",
		Method:             "PUT",
		PathPattern:        "/networkallocations/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTNetworkallocationReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTNetworkallocationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
