package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new deployments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deployments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEDeployments deletes deployments
*/
func (a *Client) DELETEDeployments(params *DELETEDeploymentsParams) (*DELETEDeploymentsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-deployments",
		Method:             "DELETE",
		PathPattern:        "/deployments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEDeploymentsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEDeploymentsNoContent), nil

}

/*
GETDeployments gets deployments
*/
func (a *Client) GETDeployments(params *GETDeploymentsParams) (*GETDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-deployments",
		Method:             "GET",
		PathPattern:        "/deployments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDeploymentsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETDeploymentsOK), nil

}

/*
LISTDeployments lists deployments
*/
func (a *Client) LISTDeployments(params *LISTDeploymentsParams) (*LISTDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-deployments",
		Method:             "GET",
		PathPattern:        "/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTDeploymentsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTDeploymentsOK), nil

}

/*
POSTDeployments creates deployments
*/
func (a *Client) POSTDeployments(params *POSTDeploymentsParams) (*POSTDeploymentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-deployments",
		Method:             "POST",
		PathPattern:        "/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTDeploymentsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTDeploymentsCreated), nil

}

/*
PUTDeployments updates deployments
*/
func (a *Client) PUTDeployments(params *PUTDeploymentsParams) (*PUTDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-deployments",
		Method:             "PUT",
		PathPattern:        "/deployments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTDeploymentsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTDeploymentsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
