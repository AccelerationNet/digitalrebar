package jigs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new jigs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for jigs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEJig deletes jig
*/
func (a *Client) DELETEJig(params *DELETEJigParams) (*DELETEJigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEJigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-jig",
		Method:             "DELETE",
		PathPattern:        "/jigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEJigReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEJigNoContent), nil

}

/*
GETJig gets jig
*/
func (a *Client) GETJig(params *GETJigParams) (*GETJigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETJigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-jig",
		Method:             "GET",
		PathPattern:        "/jigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETJigReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETJigOK), nil

}

/*
LISTJigs lists jigs
*/
func (a *Client) LISTJigs(params *LISTJigsParams) (*LISTJigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTJigsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-jigs",
		Method:             "GET",
		PathPattern:        "/jigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTJigsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTJigsOK), nil

}

/*
POSTJig creates jig
*/
func (a *Client) POSTJig(params *POSTJigParams) (*POSTJigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTJigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-jig",
		Method:             "POST",
		PathPattern:        "/jigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTJigReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTJigCreated), nil

}

/*
PUTJig updates jig
*/
func (a *Client) PUTJig(params *PUTJigParams) (*PUTJigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTJigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-jig",
		Method:             "PUT",
		PathPattern:        "/jigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTJigReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTJigOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
