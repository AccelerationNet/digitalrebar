package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/attribs"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/availablehammers"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/barclamps"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/capabilities"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/deploymentroles"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/deployments"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/dnsnameentries"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/dnsnamefilters"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/eventselectors"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/eventsinks"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/hammers"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/jigs"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/networkallocations"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/networkranges"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/networkrouters"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/networks"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/noderoles"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/nodes"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/profiles"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/providers"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/roles"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/tenants"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/users"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/client/usertenantcapabilities"
)

// Default rebar core HTTP client.
var Default = NewHTTPClient(nil)

// NewHTTPClient creates a new rebar core HTTP client.
func NewHTTPClient(formats strfmt.Registry) *RebarCore {
	if formats == nil {
		formats = strfmt.Default
	}
	transport := httptransport.New("localhost", "/api/v1", []string{"https"})
	return New(transport, formats)
}

// New creates a new rebar core client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *RebarCore {
	cli := new(RebarCore)
	cli.Transport = transport

	cli.Attribs = attribs.New(transport, formats)

	cli.Availablehammers = availablehammers.New(transport, formats)

	cli.Barclamps = barclamps.New(transport, formats)

	cli.Capabilities = capabilities.New(transport, formats)

	cli.Deploymentroles = deploymentroles.New(transport, formats)

	cli.Deployments = deployments.New(transport, formats)

	cli.Dnsnameentries = dnsnameentries.New(transport, formats)

	cli.Dnsnamefilters = dnsnamefilters.New(transport, formats)

	cli.Eventselectors = eventselectors.New(transport, formats)

	cli.Eventsinks = eventsinks.New(transport, formats)

	cli.Hammers = hammers.New(transport, formats)

	cli.Jigs = jigs.New(transport, formats)

	cli.Networkallocations = networkallocations.New(transport, formats)

	cli.Networkranges = networkranges.New(transport, formats)

	cli.Networkrouters = networkrouters.New(transport, formats)

	cli.Networks = networks.New(transport, formats)

	cli.Noderoles = noderoles.New(transport, formats)

	cli.Nodes = nodes.New(transport, formats)

	cli.Profiles = profiles.New(transport, formats)

	cli.Providers = providers.New(transport, formats)

	cli.Roles = roles.New(transport, formats)

	cli.Tenants = tenants.New(transport, formats)

	cli.Users = users.New(transport, formats)

	cli.Usertenantcapabilities = usertenantcapabilities.New(transport, formats)

	return cli
}

// RebarCore is a client for rebar core
type RebarCore struct {
	Attribs *attribs.Client

	Availablehammers *availablehammers.Client

	Barclamps *barclamps.Client

	Capabilities *capabilities.Client

	Deploymentroles *deploymentroles.Client

	Deployments *deployments.Client

	Dnsnameentries *dnsnameentries.Client

	Dnsnamefilters *dnsnamefilters.Client

	Eventselectors *eventselectors.Client

	Eventsinks *eventsinks.Client

	Hammers *hammers.Client

	Jigs *jigs.Client

	Networkallocations *networkallocations.Client

	Networkranges *networkranges.Client

	Networkrouters *networkrouters.Client

	Networks *networks.Client

	Noderoles *noderoles.Client

	Nodes *nodes.Client

	Profiles *profiles.Client

	Providers *providers.Client

	Roles *roles.Client

	Tenants *tenants.Client

	Users *users.Client

	Usertenantcapabilities *usertenantcapabilities.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *RebarCore) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Attribs.SetTransport(transport)

	c.Availablehammers.SetTransport(transport)

	c.Barclamps.SetTransport(transport)

	c.Capabilities.SetTransport(transport)

	c.Deploymentroles.SetTransport(transport)

	c.Deployments.SetTransport(transport)

	c.Dnsnameentries.SetTransport(transport)

	c.Dnsnamefilters.SetTransport(transport)

	c.Eventselectors.SetTransport(transport)

	c.Eventsinks.SetTransport(transport)

	c.Hammers.SetTransport(transport)

	c.Jigs.SetTransport(transport)

	c.Networkallocations.SetTransport(transport)

	c.Networkranges.SetTransport(transport)

	c.Networkrouters.SetTransport(transport)

	c.Networks.SetTransport(transport)

	c.Noderoles.SetTransport(transport)

	c.Nodes.SetTransport(transport)

	c.Profiles.SetTransport(transport)

	c.Providers.SetTransport(transport)

	c.Roles.SetTransport(transport)

	c.Tenants.SetTransport(transport)

	c.Users.SetTransport(transport)

	c.Usertenantcapabilities.SetTransport(transport)

}
