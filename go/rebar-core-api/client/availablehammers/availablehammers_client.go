package availablehammers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new availablehammers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for availablehammers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEAvailablehammers deletes available hammers
*/
func (a *Client) DELETEAvailablehammers(params *DELETEAvailablehammersParams) (*DELETEAvailablehammersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEAvailablehammersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-availablehammers",
		Method:             "DELETE",
		PathPattern:        "/availablehammers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEAvailablehammersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEAvailablehammersNoContent), nil

}

/*
GETAvailablehammers gets available hammers
*/
func (a *Client) GETAvailablehammers(params *GETAvailablehammersParams) (*GETAvailablehammersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETAvailablehammersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-availablehammers",
		Method:             "GET",
		PathPattern:        "/availablehammers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETAvailablehammersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETAvailablehammersOK), nil

}

/*
LISTAvailablehammers lists availablehammers
*/
func (a *Client) LISTAvailablehammers(params *LISTAvailablehammersParams) (*LISTAvailablehammersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTAvailablehammersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-availablehammers",
		Method:             "GET",
		PathPattern:        "/availablehammers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTAvailablehammersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTAvailablehammersOK), nil

}

/*
POSTAvailablehammers creates available hammers
*/
func (a *Client) POSTAvailablehammers(params *POSTAvailablehammersParams) (*POSTAvailablehammersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTAvailablehammersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-availablehammers",
		Method:             "POST",
		PathPattern:        "/availablehammers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTAvailablehammersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTAvailablehammersCreated), nil

}

/*
PUTAvailablehammers updates available hammers
*/
func (a *Client) PUTAvailablehammers(params *PUTAvailablehammersParams) (*PUTAvailablehammersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTAvailablehammersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-availablehammers",
		Method:             "PUT",
		PathPattern:        "/availablehammers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTAvailablehammersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTAvailablehammersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
