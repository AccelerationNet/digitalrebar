package attribs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new attribs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attribs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEAttrib deletes attrib
*/
func (a *Client) DELETEAttrib(params *DELETEAttribParams) (*DELETEAttribNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEAttribParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-attrib",
		Method:             "DELETE",
		PathPattern:        "/attribs/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEAttribReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEAttribNoContent), nil

}

/*
GETAttrib gets attrib
*/
func (a *Client) GETAttrib(params *GETAttribParams) (*GETAttribOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETAttribParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-attrib",
		Method:             "GET",
		PathPattern:        "/attribs/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETAttribReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETAttribOK), nil

}

/*
LISTAttribs lists attribs
*/
func (a *Client) LISTAttribs(params *LISTAttribsParams) (*LISTAttribsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTAttribsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-attribs",
		Method:             "GET",
		PathPattern:        "/attribs",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTAttribsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTAttribsOK), nil

}

/*
POSTAttrib creates attrib
*/
func (a *Client) POSTAttrib(params *POSTAttribParams) (*POSTAttribCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTAttribParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-attrib",
		Method:             "POST",
		PathPattern:        "/attribs",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTAttribReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTAttribCreated), nil

}

/*
PUTAttrib updates attrib
*/
func (a *Client) PUTAttrib(params *PUTAttribParams) (*PUTAttribOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTAttribParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-attrib",
		Method:             "PUT",
		PathPattern:        "/attribs/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json"},
		ConsumesMediaTypes: []string{"application/javascript", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTAttribReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTAttribOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
