package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETENode deletes node
*/
func (a *Client) DELETENode(params *DELETENodeParams) (*DELETENodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETENodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-node",
		Method:             "DELETE",
		PathPattern:        "/nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETENodeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETENodeNoContent), nil

}

/*
GETNode gets node
*/
func (a *Client) GETNode(params *GETNodeParams, authInfo runtime.ClientAuthInfoWriter) (*GETNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-node",
		Method:             "GET",
		PathPattern:        "/nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETNodeOK), nil

}

/*
LISTNodes lists nodes
*/
func (a *Client) LISTNodes(params *LISTNodesParams) (*LISTNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-nodes",
		Method:             "GET",
		PathPattern:        "/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTNodesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTNodesOK), nil

}

/*
PATCHNode patches nodes
*/
func (a *Client) PATCHNode(params *PATCHNodeParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPATCHNodeParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PATCH-node",
		Method:             "PATCH",
		PathPattern:        "/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PATCHNodeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
POSTNode creates node
*/
func (a *Client) POSTNode(params *POSTNodeParams) (*POSTNodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-node",
		Method:             "POST",
		PathPattern:        "/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTNodeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTNodeCreated), nil

}

/*
PUTNode updates node
*/
func (a *Client) PUTNode(params *PUTNodeParams) (*PUTNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-node",
		Method:             "PUT",
		PathPattern:        "/nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTNodeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTNodeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
