package eventselectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETEventselectorHandlerFunc turns a function with the right signature into a g e t eventselector handler
type GETEventselectorHandlerFunc func(GETEventselectorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETEventselectorHandlerFunc) Handle(params GETEventselectorParams) middleware.Responder {
	return fn(params)
}

// GETEventselectorHandler interface for that can handle valid g e t eventselector params
type GETEventselectorHandler interface {
	Handle(GETEventselectorParams) middleware.Responder
}

// NewGETEventselector creates a new http.Handler for the g e t eventselector operation
func NewGETEventselector(ctx *middleware.Context, handler GETEventselectorHandler) *GETEventselector {
	return &GETEventselector{Context: ctx, Handler: handler}
}

/*GETEventselector swagger:route GET /eventselectors/{id} Eventselectors gETEventselector

Get EventSelector

*/
type GETEventselector struct {
	Context *middleware.Context
	Handler GETEventselectorHandler
}

func (o *GETEventselector) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETEventselectorParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
