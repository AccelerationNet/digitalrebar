package eventselectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LISTEventselectorsHandlerFunc turns a function with the right signature into a l i s t eventselectors handler
type LISTEventselectorsHandlerFunc func(LISTEventselectorsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LISTEventselectorsHandlerFunc) Handle(params LISTEventselectorsParams) middleware.Responder {
	return fn(params)
}

// LISTEventselectorsHandler interface for that can handle valid l i s t eventselectors params
type LISTEventselectorsHandler interface {
	Handle(LISTEventselectorsParams) middleware.Responder
}

// NewLISTEventselectors creates a new http.Handler for the l i s t eventselectors operation
func NewLISTEventselectors(ctx *middleware.Context, handler LISTEventselectorsHandler) *LISTEventselectors {
	return &LISTEventselectors{Context: ctx, Handler: handler}
}

/*LISTEventselectors swagger:route GET /eventselectors Eventselectors lISTEventselectors

List Eventselectors

*/
type LISTEventselectors struct {
	Context *middleware.Context
	Handler LISTEventselectorsHandler
}

func (o *LISTEventselectors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLISTEventselectorsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
