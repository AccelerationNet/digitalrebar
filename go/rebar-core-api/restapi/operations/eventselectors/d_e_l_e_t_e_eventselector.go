package eventselectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETEEventselectorHandlerFunc turns a function with the right signature into a d e l e t e eventselector handler
type DELETEEventselectorHandlerFunc func(DELETEEventselectorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETEEventselectorHandlerFunc) Handle(params DELETEEventselectorParams) middleware.Responder {
	return fn(params)
}

// DELETEEventselectorHandler interface for that can handle valid d e l e t e eventselector params
type DELETEEventselectorHandler interface {
	Handle(DELETEEventselectorParams) middleware.Responder
}

// NewDELETEEventselector creates a new http.Handler for the d e l e t e eventselector operation
func NewDELETEEventselector(ctx *middleware.Context, handler DELETEEventselectorHandler) *DELETEEventselector {
	return &DELETEEventselector{Context: ctx, Handler: handler}
}

/*DELETEEventselector swagger:route DELETE /eventselectors/{id} Eventselectors dELETEEventselector

Delete EventSelector

*/
type DELETEEventselector struct {
	Context *middleware.Context
	Handler DELETEEventselectorHandler
}

func (o *DELETEEventselector) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETEEventselectorParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
