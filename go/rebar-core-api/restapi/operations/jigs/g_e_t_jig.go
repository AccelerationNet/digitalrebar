package jigs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETJigHandlerFunc turns a function with the right signature into a g e t jig handler
type GETJigHandlerFunc func(GETJigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETJigHandlerFunc) Handle(params GETJigParams) middleware.Responder {
	return fn(params)
}

// GETJigHandler interface for that can handle valid g e t jig params
type GETJigHandler interface {
	Handle(GETJigParams) middleware.Responder
}

// NewGETJig creates a new http.Handler for the g e t jig operation
func NewGETJig(ctx *middleware.Context, handler GETJigHandler) *GETJig {
	return &GETJig{Context: ctx, Handler: handler}
}

/*GETJig swagger:route GET /jigs/{id} Jigs gETJig

Get Jig

*/
type GETJig struct {
	Context *middleware.Context
	Handler GETJigHandler
}

func (o *GETJig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETJigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
