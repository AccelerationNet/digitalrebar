package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETETenantHandlerFunc turns a function with the right signature into a d e l e t e tenant handler
type DELETETenantHandlerFunc func(DELETETenantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETETenantHandlerFunc) Handle(params DELETETenantParams) middleware.Responder {
	return fn(params)
}

// DELETETenantHandler interface for that can handle valid d e l e t e tenant params
type DELETETenantHandler interface {
	Handle(DELETETenantParams) middleware.Responder
}

// NewDELETETenant creates a new http.Handler for the d e l e t e tenant operation
func NewDELETETenant(ctx *middleware.Context, handler DELETETenantHandler) *DELETETenant {
	return &DELETETenant{Context: ctx, Handler: handler}
}

/*DELETETenant swagger:route DELETE /tenants/{id} Tenants dELETETenant

Delete Tenant

*/
type DELETETenant struct {
	Context *middleware.Context
	Handler DELETETenantHandler
}

func (o *DELETETenant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETETenantParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
