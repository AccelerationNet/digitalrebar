package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PATCHNodeHandlerFunc turns a function with the right signature into a p a t c h node handler
type PATCHNodeHandlerFunc func(PATCHNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PATCHNodeHandlerFunc) Handle(params PATCHNodeParams) middleware.Responder {
	return fn(params)
}

// PATCHNodeHandler interface for that can handle valid p a t c h node params
type PATCHNodeHandler interface {
	Handle(PATCHNodeParams) middleware.Responder
}

// NewPATCHNode creates a new http.Handler for the p a t c h node operation
func NewPATCHNode(ctx *middleware.Context, handler PATCHNodeHandler) *PATCHNode {
	return &PATCHNode{Context: ctx, Handler: handler}
}

/*PATCHNode swagger:route PATCH /nodes Nodes pATCHNode

Patch Nodes

*/
type PATCHNode struct {
	Context *middleware.Context
	Handler PATCHNodeHandler
}

func (o *PATCHNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPATCHNodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PATCHNodeDefaultBody p a t c h node default body
// swagger:model PATCHNodeDefaultBody
type PATCHNodeDefaultBody interface{}
