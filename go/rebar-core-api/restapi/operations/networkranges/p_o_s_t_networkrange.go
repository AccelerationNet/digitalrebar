package networkranges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTNetworkrangeHandlerFunc turns a function with the right signature into a p o s t networkrange handler
type POSTNetworkrangeHandlerFunc func(POSTNetworkrangeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTNetworkrangeHandlerFunc) Handle(params POSTNetworkrangeParams) middleware.Responder {
	return fn(params)
}

// POSTNetworkrangeHandler interface for that can handle valid p o s t networkrange params
type POSTNetworkrangeHandler interface {
	Handle(POSTNetworkrangeParams) middleware.Responder
}

// NewPOSTNetworkrange creates a new http.Handler for the p o s t networkrange operation
func NewPOSTNetworkrange(ctx *middleware.Context, handler POSTNetworkrangeHandler) *POSTNetworkrange {
	return &POSTNetworkrange{Context: ctx, Handler: handler}
}

/*POSTNetworkrange swagger:route POST /networkranges Networkranges pOSTNetworkrange

Create NetworkRange

*/
type POSTNetworkrange struct {
	Context *middleware.Context
	Handler POSTNetworkrangeHandler
}

func (o *POSTNetworkrange) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTNetworkrangeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
