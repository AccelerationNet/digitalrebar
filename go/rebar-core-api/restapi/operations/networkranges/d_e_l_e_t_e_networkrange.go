package networkranges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETENetworkrangeHandlerFunc turns a function with the right signature into a d e l e t e networkrange handler
type DELETENetworkrangeHandlerFunc func(DELETENetworkrangeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETENetworkrangeHandlerFunc) Handle(params DELETENetworkrangeParams) middleware.Responder {
	return fn(params)
}

// DELETENetworkrangeHandler interface for that can handle valid d e l e t e networkrange params
type DELETENetworkrangeHandler interface {
	Handle(DELETENetworkrangeParams) middleware.Responder
}

// NewDELETENetworkrange creates a new http.Handler for the d e l e t e networkrange operation
func NewDELETENetworkrange(ctx *middleware.Context, handler DELETENetworkrangeHandler) *DELETENetworkrange {
	return &DELETENetworkrange{Context: ctx, Handler: handler}
}

/*DELETENetworkrange swagger:route DELETE /networkranges/{id} Networkranges dELETENetworkrange

Delete NetworkRange

*/
type DELETENetworkrange struct {
	Context *middleware.Context
	Handler DELETENetworkrangeHandler
}

func (o *DELETENetworkrange) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETENetworkrangeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
