package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTRolesHandlerFunc turns a function with the right signature into a p o s t roles handler
type POSTRolesHandlerFunc func(POSTRolesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTRolesHandlerFunc) Handle(params POSTRolesParams) middleware.Responder {
	return fn(params)
}

// POSTRolesHandler interface for that can handle valid p o s t roles params
type POSTRolesHandler interface {
	Handle(POSTRolesParams) middleware.Responder
}

// NewPOSTRoles creates a new http.Handler for the p o s t roles operation
func NewPOSTRoles(ctx *middleware.Context, handler POSTRolesHandler) *POSTRoles {
	return &POSTRoles{Context: ctx, Handler: handler}
}

/*POSTRoles swagger:route POST /roles Roles pOSTRoles

Create Roles

*/
type POSTRoles struct {
	Context *middleware.Context
	Handler POSTRolesHandler
}

func (o *POSTRoles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTRolesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
