package dnsnameentries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTDnsnameentriesHandlerFunc turns a function with the right signature into a p o s t dnsnameentries handler
type POSTDnsnameentriesHandlerFunc func(POSTDnsnameentriesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTDnsnameentriesHandlerFunc) Handle(params POSTDnsnameentriesParams) middleware.Responder {
	return fn(params)
}

// POSTDnsnameentriesHandler interface for that can handle valid p o s t dnsnameentries params
type POSTDnsnameentriesHandler interface {
	Handle(POSTDnsnameentriesParams) middleware.Responder
}

// NewPOSTDnsnameentries creates a new http.Handler for the p o s t dnsnameentries operation
func NewPOSTDnsnameentries(ctx *middleware.Context, handler POSTDnsnameentriesHandler) *POSTDnsnameentries {
	return &POSTDnsnameentries{Context: ctx, Handler: handler}
}

/*POSTDnsnameentries swagger:route POST /dnsnameentries Dnsnameentries pOSTDnsnameentries

Create DNSNameEntries

*/
type POSTDnsnameentries struct {
	Context *middleware.Context
	Handler POSTDnsnameentriesHandler
}

func (o *POSTDnsnameentries) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTDnsnameentriesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
