package dnsnameentries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETDnsnameentriesHandlerFunc turns a function with the right signature into a g e t dnsnameentries handler
type GETDnsnameentriesHandlerFunc func(GETDnsnameentriesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETDnsnameentriesHandlerFunc) Handle(params GETDnsnameentriesParams) middleware.Responder {
	return fn(params)
}

// GETDnsnameentriesHandler interface for that can handle valid g e t dnsnameentries params
type GETDnsnameentriesHandler interface {
	Handle(GETDnsnameentriesParams) middleware.Responder
}

// NewGETDnsnameentries creates a new http.Handler for the g e t dnsnameentries operation
func NewGETDnsnameentries(ctx *middleware.Context, handler GETDnsnameentriesHandler) *GETDnsnameentries {
	return &GETDnsnameentries{Context: ctx, Handler: handler}
}

/*GETDnsnameentries swagger:route GET /dnsnameentries/{id} Dnsnameentries gETDnsnameentries

Get DNSNameEntries

*/
type GETDnsnameentries struct {
	Context *middleware.Context
	Handler GETDnsnameentriesHandler
}

func (o *GETDnsnameentries) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETDnsnameentriesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
