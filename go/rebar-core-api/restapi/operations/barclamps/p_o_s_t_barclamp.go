package barclamps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTBarclampHandlerFunc turns a function with the right signature into a p o s t barclamp handler
type POSTBarclampHandlerFunc func(POSTBarclampParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTBarclampHandlerFunc) Handle(params POSTBarclampParams) middleware.Responder {
	return fn(params)
}

// POSTBarclampHandler interface for that can handle valid p o s t barclamp params
type POSTBarclampHandler interface {
	Handle(POSTBarclampParams) middleware.Responder
}

// NewPOSTBarclamp creates a new http.Handler for the p o s t barclamp operation
func NewPOSTBarclamp(ctx *middleware.Context, handler POSTBarclampHandler) *POSTBarclamp {
	return &POSTBarclamp{Context: ctx, Handler: handler}
}

/*POSTBarclamp swagger:route POST /barclamps Barclamps pOSTBarclamp

Create Barclamp

*/
type POSTBarclamp struct {
	Context *middleware.Context
	Handler POSTBarclampHandler
}

func (o *POSTBarclamp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTBarclampParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
