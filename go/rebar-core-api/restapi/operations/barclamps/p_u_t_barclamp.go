package barclamps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PUTBarclampHandlerFunc turns a function with the right signature into a p u t barclamp handler
type PUTBarclampHandlerFunc func(PUTBarclampParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PUTBarclampHandlerFunc) Handle(params PUTBarclampParams) middleware.Responder {
	return fn(params)
}

// PUTBarclampHandler interface for that can handle valid p u t barclamp params
type PUTBarclampHandler interface {
	Handle(PUTBarclampParams) middleware.Responder
}

// NewPUTBarclamp creates a new http.Handler for the p u t barclamp operation
func NewPUTBarclamp(ctx *middleware.Context, handler PUTBarclampHandler) *PUTBarclamp {
	return &PUTBarclamp{Context: ctx, Handler: handler}
}

/*PUTBarclamp swagger:route PUT /barclamps/{id} Barclamps pUTBarclamp

Update Barclamp

*/
type PUTBarclamp struct {
	Context *middleware.Context
	Handler PUTBarclampHandler
}

func (o *PUTBarclamp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPUTBarclampParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
