package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTCapabilitiesHandlerFunc turns a function with the right signature into a p o s t capabilities handler
type POSTCapabilitiesHandlerFunc func(POSTCapabilitiesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTCapabilitiesHandlerFunc) Handle(params POSTCapabilitiesParams) middleware.Responder {
	return fn(params)
}

// POSTCapabilitiesHandler interface for that can handle valid p o s t capabilities params
type POSTCapabilitiesHandler interface {
	Handle(POSTCapabilitiesParams) middleware.Responder
}

// NewPOSTCapabilities creates a new http.Handler for the p o s t capabilities operation
func NewPOSTCapabilities(ctx *middleware.Context, handler POSTCapabilitiesHandler) *POSTCapabilities {
	return &POSTCapabilities{Context: ctx, Handler: handler}
}

/*POSTCapabilities swagger:route POST /capabilities Capabilities pOSTCapabilities

Create Capabilities

*/
type POSTCapabilities struct {
	Context *middleware.Context
	Handler POSTCapabilitiesHandler
}

func (o *POSTCapabilities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTCapabilitiesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
