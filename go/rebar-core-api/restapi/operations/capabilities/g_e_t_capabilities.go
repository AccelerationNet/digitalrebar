package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETCapabilitiesHandlerFunc turns a function with the right signature into a g e t capabilities handler
type GETCapabilitiesHandlerFunc func(GETCapabilitiesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETCapabilitiesHandlerFunc) Handle(params GETCapabilitiesParams) middleware.Responder {
	return fn(params)
}

// GETCapabilitiesHandler interface for that can handle valid g e t capabilities params
type GETCapabilitiesHandler interface {
	Handle(GETCapabilitiesParams) middleware.Responder
}

// NewGETCapabilities creates a new http.Handler for the g e t capabilities operation
func NewGETCapabilities(ctx *middleware.Context, handler GETCapabilitiesHandler) *GETCapabilities {
	return &GETCapabilities{Context: ctx, Handler: handler}
}

/*GETCapabilities swagger:route GET /capabilities/{id} Capabilities gETCapabilities

Get Capabilities

*/
type GETCapabilities struct {
	Context *middleware.Context
	Handler GETCapabilitiesHandler
}

func (o *GETCapabilities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETCapabilitiesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
