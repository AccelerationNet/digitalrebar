package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETECapabilitiesHandlerFunc turns a function with the right signature into a d e l e t e capabilities handler
type DELETECapabilitiesHandlerFunc func(DELETECapabilitiesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETECapabilitiesHandlerFunc) Handle(params DELETECapabilitiesParams) middleware.Responder {
	return fn(params)
}

// DELETECapabilitiesHandler interface for that can handle valid d e l e t e capabilities params
type DELETECapabilitiesHandler interface {
	Handle(DELETECapabilitiesParams) middleware.Responder
}

// NewDELETECapabilities creates a new http.Handler for the d e l e t e capabilities operation
func NewDELETECapabilities(ctx *middleware.Context, handler DELETECapabilitiesHandler) *DELETECapabilities {
	return &DELETECapabilities{Context: ctx, Handler: handler}
}

/*DELETECapabilities swagger:route DELETE /capabilities/{id} Capabilities dELETECapabilities

Delete Capabilities

*/
type DELETECapabilities struct {
	Context *middleware.Context
	Handler DELETECapabilitiesHandler
}

func (o *DELETECapabilities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETECapabilitiesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
