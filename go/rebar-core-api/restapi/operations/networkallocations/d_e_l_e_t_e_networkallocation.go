package networkallocations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETENetworkallocationHandlerFunc turns a function with the right signature into a d e l e t e networkallocation handler
type DELETENetworkallocationHandlerFunc func(DELETENetworkallocationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETENetworkallocationHandlerFunc) Handle(params DELETENetworkallocationParams) middleware.Responder {
	return fn(params)
}

// DELETENetworkallocationHandler interface for that can handle valid d e l e t e networkallocation params
type DELETENetworkallocationHandler interface {
	Handle(DELETENetworkallocationParams) middleware.Responder
}

// NewDELETENetworkallocation creates a new http.Handler for the d e l e t e networkallocation operation
func NewDELETENetworkallocation(ctx *middleware.Context, handler DELETENetworkallocationHandler) *DELETENetworkallocation {
	return &DELETENetworkallocation{Context: ctx, Handler: handler}
}

/*DELETENetworkallocation swagger:route DELETE /networkallocations/{id} Networkallocations dELETENetworkallocation

Delete NetworkAllocation

*/
type DELETENetworkallocation struct {
	Context *middleware.Context
	Handler DELETENetworkallocationHandler
}

func (o *DELETENetworkallocation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETENetworkallocationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
