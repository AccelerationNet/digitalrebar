package networkallocations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETNetworkallocationHandlerFunc turns a function with the right signature into a g e t networkallocation handler
type GETNetworkallocationHandlerFunc func(GETNetworkallocationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETNetworkallocationHandlerFunc) Handle(params GETNetworkallocationParams) middleware.Responder {
	return fn(params)
}

// GETNetworkallocationHandler interface for that can handle valid g e t networkallocation params
type GETNetworkallocationHandler interface {
	Handle(GETNetworkallocationParams) middleware.Responder
}

// NewGETNetworkallocation creates a new http.Handler for the g e t networkallocation operation
func NewGETNetworkallocation(ctx *middleware.Context, handler GETNetworkallocationHandler) *GETNetworkallocation {
	return &GETNetworkallocation{Context: ctx, Handler: handler}
}

/*GETNetworkallocation swagger:route GET /networkallocations/{id} Networkallocations gETNetworkallocation

Get NetworkAllocation

*/
type GETNetworkallocation struct {
	Context *middleware.Context
	Handler GETNetworkallocationHandler
}

func (o *GETNetworkallocation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETNetworkallocationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
