package dnsnamefilters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETDnsnamefiltersHandlerFunc turns a function with the right signature into a g e t dnsnamefilters handler
type GETDnsnamefiltersHandlerFunc func(GETDnsnamefiltersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETDnsnamefiltersHandlerFunc) Handle(params GETDnsnamefiltersParams) middleware.Responder {
	return fn(params)
}

// GETDnsnamefiltersHandler interface for that can handle valid g e t dnsnamefilters params
type GETDnsnamefiltersHandler interface {
	Handle(GETDnsnamefiltersParams) middleware.Responder
}

// NewGETDnsnamefilters creates a new http.Handler for the g e t dnsnamefilters operation
func NewGETDnsnamefilters(ctx *middleware.Context, handler GETDnsnamefiltersHandler) *GETDnsnamefilters {
	return &GETDnsnamefilters{Context: ctx, Handler: handler}
}

/*GETDnsnamefilters swagger:route GET /dnsnamefilters/{id} Dnsnamefilters gETDnsnamefilters

Get DNSNameFilters

*/
type GETDnsnamefilters struct {
	Context *middleware.Context
	Handler GETDnsnamefiltersHandler
}

func (o *GETDnsnamefilters) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETDnsnamefiltersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
