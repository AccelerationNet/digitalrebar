package dnsnamefilters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETEDnsnamefiltersHandlerFunc turns a function with the right signature into a d e l e t e dnsnamefilters handler
type DELETEDnsnamefiltersHandlerFunc func(DELETEDnsnamefiltersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETEDnsnamefiltersHandlerFunc) Handle(params DELETEDnsnamefiltersParams) middleware.Responder {
	return fn(params)
}

// DELETEDnsnamefiltersHandler interface for that can handle valid d e l e t e dnsnamefilters params
type DELETEDnsnamefiltersHandler interface {
	Handle(DELETEDnsnamefiltersParams) middleware.Responder
}

// NewDELETEDnsnamefilters creates a new http.Handler for the d e l e t e dnsnamefilters operation
func NewDELETEDnsnamefilters(ctx *middleware.Context, handler DELETEDnsnamefiltersHandler) *DELETEDnsnamefilters {
	return &DELETEDnsnamefilters{Context: ctx, Handler: handler}
}

/*DELETEDnsnamefilters swagger:route DELETE /dnsnamefilters/{id} Dnsnamefilters dELETEDnsnamefilters

Delete DNSNameFilters

*/
type DELETEDnsnamefilters struct {
	Context *middleware.Context
	Handler DELETEDnsnamefiltersHandler
}

func (o *DELETEDnsnamefilters) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETEDnsnamefiltersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
