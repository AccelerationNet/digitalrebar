package noderoles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETNoderoleHandlerFunc turns a function with the right signature into a g e t noderole handler
type GETNoderoleHandlerFunc func(GETNoderoleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETNoderoleHandlerFunc) Handle(params GETNoderoleParams) middleware.Responder {
	return fn(params)
}

// GETNoderoleHandler interface for that can handle valid g e t noderole params
type GETNoderoleHandler interface {
	Handle(GETNoderoleParams) middleware.Responder
}

// NewGETNoderole creates a new http.Handler for the g e t noderole operation
func NewGETNoderole(ctx *middleware.Context, handler GETNoderoleHandler) *GETNoderole {
	return &GETNoderole{Context: ctx, Handler: handler}
}

/*GETNoderole swagger:route GET /noderoles/{id} Noderoles gETNoderole

Get NodeRole

*/
type GETNoderole struct {
	Context *middleware.Context
	Handler GETNoderoleHandler
}

func (o *GETNoderole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETNoderoleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
