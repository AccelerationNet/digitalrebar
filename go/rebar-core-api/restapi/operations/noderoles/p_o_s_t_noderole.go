package noderoles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTNoderoleHandlerFunc turns a function with the right signature into a p o s t noderole handler
type POSTNoderoleHandlerFunc func(POSTNoderoleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTNoderoleHandlerFunc) Handle(params POSTNoderoleParams) middleware.Responder {
	return fn(params)
}

// POSTNoderoleHandler interface for that can handle valid p o s t noderole params
type POSTNoderoleHandler interface {
	Handle(POSTNoderoleParams) middleware.Responder
}

// NewPOSTNoderole creates a new http.Handler for the p o s t noderole operation
func NewPOSTNoderole(ctx *middleware.Context, handler POSTNoderoleHandler) *POSTNoderole {
	return &POSTNoderole{Context: ctx, Handler: handler}
}

/*POSTNoderole swagger:route POST /noderoles Noderoles pOSTNoderole

Create NodeRole

*/
type POSTNoderole struct {
	Context *middleware.Context
	Handler POSTNoderoleHandler
}

func (o *POSTNoderole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTNoderoleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
