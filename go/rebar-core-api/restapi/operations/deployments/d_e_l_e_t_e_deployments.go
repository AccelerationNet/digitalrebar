package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETEDeploymentsHandlerFunc turns a function with the right signature into a d e l e t e deployments handler
type DELETEDeploymentsHandlerFunc func(DELETEDeploymentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETEDeploymentsHandlerFunc) Handle(params DELETEDeploymentsParams) middleware.Responder {
	return fn(params)
}

// DELETEDeploymentsHandler interface for that can handle valid d e l e t e deployments params
type DELETEDeploymentsHandler interface {
	Handle(DELETEDeploymentsParams) middleware.Responder
}

// NewDELETEDeployments creates a new http.Handler for the d e l e t e deployments operation
func NewDELETEDeployments(ctx *middleware.Context, handler DELETEDeploymentsHandler) *DELETEDeployments {
	return &DELETEDeployments{Context: ctx, Handler: handler}
}

/*DELETEDeployments swagger:route DELETE /deployments/{id} Deployments dELETEDeployments

Delete Deployments

*/
type DELETEDeployments struct {
	Context *middleware.Context
	Handler DELETEDeploymentsHandler
}

func (o *DELETEDeployments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETEDeploymentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
