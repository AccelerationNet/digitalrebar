package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/attribs"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/availablehammers"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/barclamps"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/capabilities"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/deploymentroles"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/deployments"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/dnsnameentries"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/dnsnamefilters"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/eventselectors"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/eventsinks"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/hammers"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/jigs"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/networkallocations"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/networkranges"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/networkrouters"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/networks"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/noderoles"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/nodes"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/profiles"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/providers"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/roles"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/tenants"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/users"
	"github.com/digitalrebar/digitalrebar/go/rebar-core-api/restapi/operations/usertenantcapabilities"
)

// NewRebarCoreAPI creates a new RebarCore instance
func NewRebarCoreAPI(spec *loads.Document) *RebarCoreAPI {
	return &RebarCoreAPI{
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
		spec:            spec,
	}
}

/*RebarCoreAPI Digital Rebar Core API */
type RebarCoreAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// AuthorizationAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	AuthorizationAuth func(string) (interface{}, error)

	// AuthTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key auth_token provided in the query
	AuthTokenAuth func(string) (interface{}, error)

	// AttribsDELETEAttribHandler sets the operation handler for the d e l e t e attrib operation
	AttribsDELETEAttribHandler attribs.DELETEAttribHandler
	// AvailablehammersDELETEAvailablehammersHandler sets the operation handler for the d e l e t e availablehammers operation
	AvailablehammersDELETEAvailablehammersHandler availablehammers.DELETEAvailablehammersHandler
	// BarclampsDELETEBarclampHandler sets the operation handler for the d e l e t e barclamp operation
	BarclampsDELETEBarclampHandler barclamps.DELETEBarclampHandler
	// CapabilitiesDELETECapabilitiesHandler sets the operation handler for the d e l e t e capabilities operation
	CapabilitiesDELETECapabilitiesHandler capabilities.DELETECapabilitiesHandler
	// DeploymentrolesDELETEDeploymentrolesHandler sets the operation handler for the d e l e t e deploymentroles operation
	DeploymentrolesDELETEDeploymentrolesHandler deploymentroles.DELETEDeploymentrolesHandler
	// DeploymentsDELETEDeploymentsHandler sets the operation handler for the d e l e t e deployments operation
	DeploymentsDELETEDeploymentsHandler deployments.DELETEDeploymentsHandler
	// DnsnameentriesDELETEDnsnameentriesHandler sets the operation handler for the d e l e t e dnsnameentries operation
	DnsnameentriesDELETEDnsnameentriesHandler dnsnameentries.DELETEDnsnameentriesHandler
	// DnsnamefiltersDELETEDnsnamefiltersHandler sets the operation handler for the d e l e t e dnsnamefilters operation
	DnsnamefiltersDELETEDnsnamefiltersHandler dnsnamefilters.DELETEDnsnamefiltersHandler
	// EventselectorsDELETEEventselectorHandler sets the operation handler for the d e l e t e eventselector operation
	EventselectorsDELETEEventselectorHandler eventselectors.DELETEEventselectorHandler
	// EventsinksDELETEEventsinkHandler sets the operation handler for the d e l e t e eventsink operation
	EventsinksDELETEEventsinkHandler eventsinks.DELETEEventsinkHandler
	// HammersDELETEHammerHandler sets the operation handler for the d e l e t e hammer operation
	HammersDELETEHammerHandler hammers.DELETEHammerHandler
	// JigsDELETEJigHandler sets the operation handler for the d e l e t e jig operation
	JigsDELETEJigHandler jigs.DELETEJigHandler
	// NetworksDELETENetworkHandler sets the operation handler for the d e l e t e network operation
	NetworksDELETENetworkHandler networks.DELETENetworkHandler
	// NetworkallocationsDELETENetworkallocationHandler sets the operation handler for the d e l e t e networkallocation operation
	NetworkallocationsDELETENetworkallocationHandler networkallocations.DELETENetworkallocationHandler
	// NetworkrangesDELETENetworkrangeHandler sets the operation handler for the d e l e t e networkrange operation
	NetworkrangesDELETENetworkrangeHandler networkranges.DELETENetworkrangeHandler
	// NetworkroutersDELETENetworkrouterHandler sets the operation handler for the d e l e t e networkrouter operation
	NetworkroutersDELETENetworkrouterHandler networkrouters.DELETENetworkrouterHandler
	// NodesDELETENodeHandler sets the operation handler for the d e l e t e node operation
	NodesDELETENodeHandler nodes.DELETENodeHandler
	// NoderolesDELETENoderoleHandler sets the operation handler for the d e l e t e noderole operation
	NoderolesDELETENoderoleHandler noderoles.DELETENoderoleHandler
	// ProfilesDELETEProfileHandler sets the operation handler for the d e l e t e profile operation
	ProfilesDELETEProfileHandler profiles.DELETEProfileHandler
	// ProvidersDELETEProviderHandler sets the operation handler for the d e l e t e provider operation
	ProvidersDELETEProviderHandler providers.DELETEProviderHandler
	// RolesDELETERolesHandler sets the operation handler for the d e l e t e roles operation
	RolesDELETERolesHandler roles.DELETERolesHandler
	// TenantsDELETETenantHandler sets the operation handler for the d e l e t e tenant operation
	TenantsDELETETenantHandler tenants.DELETETenantHandler
	// UsersDELETEUserHandler sets the operation handler for the d e l e t e user operation
	UsersDELETEUserHandler users.DELETEUserHandler
	// UsertenantcapabilitiesDELETEUsertenantcapabilityHandler sets the operation handler for the d e l e t e usertenantcapability operation
	UsertenantcapabilitiesDELETEUsertenantcapabilityHandler usertenantcapabilities.DELETEUsertenantcapabilityHandler
	// AttribsGETAttribHandler sets the operation handler for the g e t attrib operation
	AttribsGETAttribHandler attribs.GETAttribHandler
	// AvailablehammersGETAvailablehammersHandler sets the operation handler for the g e t availablehammers operation
	AvailablehammersGETAvailablehammersHandler availablehammers.GETAvailablehammersHandler
	// BarclampsGETBarclampHandler sets the operation handler for the g e t barclamp operation
	BarclampsGETBarclampHandler barclamps.GETBarclampHandler
	// CapabilitiesGETCapabilitiesHandler sets the operation handler for the g e t capabilities operation
	CapabilitiesGETCapabilitiesHandler capabilities.GETCapabilitiesHandler
	// DeploymentrolesGETDeploymentrolesHandler sets the operation handler for the g e t deploymentroles operation
	DeploymentrolesGETDeploymentrolesHandler deploymentroles.GETDeploymentrolesHandler
	// DeploymentsGETDeploymentsHandler sets the operation handler for the g e t deployments operation
	DeploymentsGETDeploymentsHandler deployments.GETDeploymentsHandler
	// DnsnameentriesGETDnsnameentriesHandler sets the operation handler for the g e t dnsnameentries operation
	DnsnameentriesGETDnsnameentriesHandler dnsnameentries.GETDnsnameentriesHandler
	// DnsnamefiltersGETDnsnamefiltersHandler sets the operation handler for the g e t dnsnamefilters operation
	DnsnamefiltersGETDnsnamefiltersHandler dnsnamefilters.GETDnsnamefiltersHandler
	// EventselectorsGETEventselectorHandler sets the operation handler for the g e t eventselector operation
	EventselectorsGETEventselectorHandler eventselectors.GETEventselectorHandler
	// EventsinksGETEventsinkHandler sets the operation handler for the g e t eventsink operation
	EventsinksGETEventsinkHandler eventsinks.GETEventsinkHandler
	// HammersGETHammerHandler sets the operation handler for the g e t hammer operation
	HammersGETHammerHandler hammers.GETHammerHandler
	// JigsGETJigHandler sets the operation handler for the g e t jig operation
	JigsGETJigHandler jigs.GETJigHandler
	// NetworksGETNetworkHandler sets the operation handler for the g e t network operation
	NetworksGETNetworkHandler networks.GETNetworkHandler
	// NetworkallocationsGETNetworkallocationHandler sets the operation handler for the g e t networkallocation operation
	NetworkallocationsGETNetworkallocationHandler networkallocations.GETNetworkallocationHandler
	// NetworkrangesGETNetworkrangeHandler sets the operation handler for the g e t networkrange operation
	NetworkrangesGETNetworkrangeHandler networkranges.GETNetworkrangeHandler
	// NetworkroutersGETNetworkrouterHandler sets the operation handler for the g e t networkrouter operation
	NetworkroutersGETNetworkrouterHandler networkrouters.GETNetworkrouterHandler
	// NodesGETNodeHandler sets the operation handler for the g e t node operation
	NodesGETNodeHandler nodes.GETNodeHandler
	// NoderolesGETNoderoleHandler sets the operation handler for the g e t noderole operation
	NoderolesGETNoderoleHandler noderoles.GETNoderoleHandler
	// ProfilesGETProfileHandler sets the operation handler for the g e t profile operation
	ProfilesGETProfileHandler profiles.GETProfileHandler
	// ProvidersGETProviderHandler sets the operation handler for the g e t provider operation
	ProvidersGETProviderHandler providers.GETProviderHandler
	// RolesGETRolesHandler sets the operation handler for the g e t roles operation
	RolesGETRolesHandler roles.GETRolesHandler
	// TenantsGETTenantHandler sets the operation handler for the g e t tenant operation
	TenantsGETTenantHandler tenants.GETTenantHandler
	// UsersGETUserHandler sets the operation handler for the g e t user operation
	UsersGETUserHandler users.GETUserHandler
	// UsertenantcapabilitiesGETUsertenantcapabilityHandler sets the operation handler for the g e t usertenantcapability operation
	UsertenantcapabilitiesGETUsertenantcapabilityHandler usertenantcapabilities.GETUsertenantcapabilityHandler
	// AttribsLISTAttribsHandler sets the operation handler for the l i s t attribs operation
	AttribsLISTAttribsHandler attribs.LISTAttribsHandler
	// AvailablehammersLISTAvailablehammersHandler sets the operation handler for the l i s t availablehammers operation
	AvailablehammersLISTAvailablehammersHandler availablehammers.LISTAvailablehammersHandler
	// BarclampsLISTBarclampsHandler sets the operation handler for the l i s t barclamps operation
	BarclampsLISTBarclampsHandler barclamps.LISTBarclampsHandler
	// CapabilitiesLISTCapabilitiesHandler sets the operation handler for the l i s t capabilities operation
	CapabilitiesLISTCapabilitiesHandler capabilities.LISTCapabilitiesHandler
	// DeploymentrolesLISTDeploymentrolesHandler sets the operation handler for the l i s t deploymentroles operation
	DeploymentrolesLISTDeploymentrolesHandler deploymentroles.LISTDeploymentrolesHandler
	// DeploymentsLISTDeploymentsHandler sets the operation handler for the l i s t deployments operation
	DeploymentsLISTDeploymentsHandler deployments.LISTDeploymentsHandler
	// DnsnameentriesLISTDnsnameentriesHandler sets the operation handler for the l i s t dnsnameentries operation
	DnsnameentriesLISTDnsnameentriesHandler dnsnameentries.LISTDnsnameentriesHandler
	// DnsnamefiltersLISTDnsnamefiltersHandler sets the operation handler for the l i s t dnsnamefilters operation
	DnsnamefiltersLISTDnsnamefiltersHandler dnsnamefilters.LISTDnsnamefiltersHandler
	// EventselectorsLISTEventselectorsHandler sets the operation handler for the l i s t eventselectors operation
	EventselectorsLISTEventselectorsHandler eventselectors.LISTEventselectorsHandler
	// EventsinksLISTEventsinksHandler sets the operation handler for the l i s t eventsinks operation
	EventsinksLISTEventsinksHandler eventsinks.LISTEventsinksHandler
	// HammersLISTHammersHandler sets the operation handler for the l i s t hammers operation
	HammersLISTHammersHandler hammers.LISTHammersHandler
	// JigsLISTJigsHandler sets the operation handler for the l i s t jigs operation
	JigsLISTJigsHandler jigs.LISTJigsHandler
	// NetworkallocationsLISTNetworkallocationsHandler sets the operation handler for the l i s t networkallocations operation
	NetworkallocationsLISTNetworkallocationsHandler networkallocations.LISTNetworkallocationsHandler
	// NetworkrangesLISTNetworkrangesHandler sets the operation handler for the l i s t networkranges operation
	NetworkrangesLISTNetworkrangesHandler networkranges.LISTNetworkrangesHandler
	// NetworkroutersLISTNetworkroutersHandler sets the operation handler for the l i s t networkrouters operation
	NetworkroutersLISTNetworkroutersHandler networkrouters.LISTNetworkroutersHandler
	// NetworksLISTNetworksHandler sets the operation handler for the l i s t networks operation
	NetworksLISTNetworksHandler networks.LISTNetworksHandler
	// NoderolesLISTNoderolesHandler sets the operation handler for the l i s t noderoles operation
	NoderolesLISTNoderolesHandler noderoles.LISTNoderolesHandler
	// NodesLISTNodesHandler sets the operation handler for the l i s t nodes operation
	NodesLISTNodesHandler nodes.LISTNodesHandler
	// ProfilesLISTProfilesHandler sets the operation handler for the l i s t profiles operation
	ProfilesLISTProfilesHandler profiles.LISTProfilesHandler
	// ProvidersLISTProvidersHandler sets the operation handler for the l i s t providers operation
	ProvidersLISTProvidersHandler providers.LISTProvidersHandler
	// RolesLISTRolesHandler sets the operation handler for the l i s t roles operation
	RolesLISTRolesHandler roles.LISTRolesHandler
	// TenantsLISTTenantsHandler sets the operation handler for the l i s t tenants operation
	TenantsLISTTenantsHandler tenants.LISTTenantsHandler
	// UsersLISTUsersHandler sets the operation handler for the l i s t users operation
	UsersLISTUsersHandler users.LISTUsersHandler
	// UsertenantcapabilitiesLISTUsertenantcapabilitiesHandler sets the operation handler for the l i s t usertenantcapabilities operation
	UsertenantcapabilitiesLISTUsertenantcapabilitiesHandler usertenantcapabilities.LISTUsertenantcapabilitiesHandler
	// NodesPATCHNodeHandler sets the operation handler for the p a t c h node operation
	NodesPATCHNodeHandler nodes.PATCHNodeHandler
	// AttribsPOSTAttribHandler sets the operation handler for the p o s t attrib operation
	AttribsPOSTAttribHandler attribs.POSTAttribHandler
	// AvailablehammersPOSTAvailablehammersHandler sets the operation handler for the p o s t availablehammers operation
	AvailablehammersPOSTAvailablehammersHandler availablehammers.POSTAvailablehammersHandler
	// BarclampsPOSTBarclampHandler sets the operation handler for the p o s t barclamp operation
	BarclampsPOSTBarclampHandler barclamps.POSTBarclampHandler
	// CapabilitiesPOSTCapabilitiesHandler sets the operation handler for the p o s t capabilities operation
	CapabilitiesPOSTCapabilitiesHandler capabilities.POSTCapabilitiesHandler
	// DeploymentrolesPOSTDeploymentrolesHandler sets the operation handler for the p o s t deploymentroles operation
	DeploymentrolesPOSTDeploymentrolesHandler deploymentroles.POSTDeploymentrolesHandler
	// DeploymentsPOSTDeploymentsHandler sets the operation handler for the p o s t deployments operation
	DeploymentsPOSTDeploymentsHandler deployments.POSTDeploymentsHandler
	// DnsnameentriesPOSTDnsnameentriesHandler sets the operation handler for the p o s t dnsnameentries operation
	DnsnameentriesPOSTDnsnameentriesHandler dnsnameentries.POSTDnsnameentriesHandler
	// DnsnamefiltersPOSTDnsnamefiltersHandler sets the operation handler for the p o s t dnsnamefilters operation
	DnsnamefiltersPOSTDnsnamefiltersHandler dnsnamefilters.POSTDnsnamefiltersHandler
	// EventselectorsPOSTEventselectorHandler sets the operation handler for the p o s t eventselector operation
	EventselectorsPOSTEventselectorHandler eventselectors.POSTEventselectorHandler
	// EventsinksPOSTEventsinkHandler sets the operation handler for the p o s t eventsink operation
	EventsinksPOSTEventsinkHandler eventsinks.POSTEventsinkHandler
	// HammersPOSTHammerHandler sets the operation handler for the p o s t hammer operation
	HammersPOSTHammerHandler hammers.POSTHammerHandler
	// JigsPOSTJigHandler sets the operation handler for the p o s t jig operation
	JigsPOSTJigHandler jigs.POSTJigHandler
	// NetworksPOSTNetworkHandler sets the operation handler for the p o s t network operation
	NetworksPOSTNetworkHandler networks.POSTNetworkHandler
	// NetworkallocationsPOSTNetworkallocationHandler sets the operation handler for the p o s t networkallocation operation
	NetworkallocationsPOSTNetworkallocationHandler networkallocations.POSTNetworkallocationHandler
	// NetworkrangesPOSTNetworkrangeHandler sets the operation handler for the p o s t networkrange operation
	NetworkrangesPOSTNetworkrangeHandler networkranges.POSTNetworkrangeHandler
	// NetworkroutersPOSTNetworkrouterHandler sets the operation handler for the p o s t networkrouter operation
	NetworkroutersPOSTNetworkrouterHandler networkrouters.POSTNetworkrouterHandler
	// NodesPOSTNodeHandler sets the operation handler for the p o s t node operation
	NodesPOSTNodeHandler nodes.POSTNodeHandler
	// NoderolesPOSTNoderoleHandler sets the operation handler for the p o s t noderole operation
	NoderolesPOSTNoderoleHandler noderoles.POSTNoderoleHandler
	// ProfilesPOSTProfileHandler sets the operation handler for the p o s t profile operation
	ProfilesPOSTProfileHandler profiles.POSTProfileHandler
	// ProvidersPOSTProviderHandler sets the operation handler for the p o s t provider operation
	ProvidersPOSTProviderHandler providers.POSTProviderHandler
	// RolesPOSTRolesHandler sets the operation handler for the p o s t roles operation
	RolesPOSTRolesHandler roles.POSTRolesHandler
	// TenantsPOSTTenantHandler sets the operation handler for the p o s t tenant operation
	TenantsPOSTTenantHandler tenants.POSTTenantHandler
	// UsersPOSTUserHandler sets the operation handler for the p o s t user operation
	UsersPOSTUserHandler users.POSTUserHandler
	// UsertenantcapabilitiesPOSTUsertenantcapabilityHandler sets the operation handler for the p o s t usertenantcapability operation
	UsertenantcapabilitiesPOSTUsertenantcapabilityHandler usertenantcapabilities.POSTUsertenantcapabilityHandler
	// AttribsPUTAttribHandler sets the operation handler for the p u t attrib operation
	AttribsPUTAttribHandler attribs.PUTAttribHandler
	// AvailablehammersPUTAvailablehammersHandler sets the operation handler for the p u t availablehammers operation
	AvailablehammersPUTAvailablehammersHandler availablehammers.PUTAvailablehammersHandler
	// BarclampsPUTBarclampHandler sets the operation handler for the p u t barclamp operation
	BarclampsPUTBarclampHandler barclamps.PUTBarclampHandler
	// CapabilitiesPUTCapabilitiesHandler sets the operation handler for the p u t capabilities operation
	CapabilitiesPUTCapabilitiesHandler capabilities.PUTCapabilitiesHandler
	// DeploymentrolesPUTDeploymentrolesHandler sets the operation handler for the p u t deploymentroles operation
	DeploymentrolesPUTDeploymentrolesHandler deploymentroles.PUTDeploymentrolesHandler
	// DeploymentsPUTDeploymentsHandler sets the operation handler for the p u t deployments operation
	DeploymentsPUTDeploymentsHandler deployments.PUTDeploymentsHandler
	// DnsnameentriesPUTDnsnameentriesHandler sets the operation handler for the p u t dnsnameentries operation
	DnsnameentriesPUTDnsnameentriesHandler dnsnameentries.PUTDnsnameentriesHandler
	// DnsnamefiltersPUTDnsnamefiltersHandler sets the operation handler for the p u t dnsnamefilters operation
	DnsnamefiltersPUTDnsnamefiltersHandler dnsnamefilters.PUTDnsnamefiltersHandler
	// EventselectorsPUTEventselectorHandler sets the operation handler for the p u t eventselector operation
	EventselectorsPUTEventselectorHandler eventselectors.PUTEventselectorHandler
	// EventsinksPUTEventsinkHandler sets the operation handler for the p u t eventsink operation
	EventsinksPUTEventsinkHandler eventsinks.PUTEventsinkHandler
	// HammersPUTHammerHandler sets the operation handler for the p u t hammer operation
	HammersPUTHammerHandler hammers.PUTHammerHandler
	// JigsPUTJigHandler sets the operation handler for the p u t jig operation
	JigsPUTJigHandler jigs.PUTJigHandler
	// NetworksPUTNetworkHandler sets the operation handler for the p u t network operation
	NetworksPUTNetworkHandler networks.PUTNetworkHandler
	// NetworkallocationsPUTNetworkallocationHandler sets the operation handler for the p u t networkallocation operation
	NetworkallocationsPUTNetworkallocationHandler networkallocations.PUTNetworkallocationHandler
	// NetworkrangesPUTNetworkrangeHandler sets the operation handler for the p u t networkrange operation
	NetworkrangesPUTNetworkrangeHandler networkranges.PUTNetworkrangeHandler
	// NetworkroutersPUTNetworkrouterHandler sets the operation handler for the p u t networkrouter operation
	NetworkroutersPUTNetworkrouterHandler networkrouters.PUTNetworkrouterHandler
	// NodesPUTNodeHandler sets the operation handler for the p u t node operation
	NodesPUTNodeHandler nodes.PUTNodeHandler
	// NoderolesPUTNoderoleHandler sets the operation handler for the p u t noderole operation
	NoderolesPUTNoderoleHandler noderoles.PUTNoderoleHandler
	// ProfilesPUTProfileHandler sets the operation handler for the p u t profile operation
	ProfilesPUTProfileHandler profiles.PUTProfileHandler
	// ProvidersPUTProviderHandler sets the operation handler for the p u t provider operation
	ProvidersPUTProviderHandler providers.PUTProviderHandler
	// RolesPUTRolesHandler sets the operation handler for the p u t roles operation
	RolesPUTRolesHandler roles.PUTRolesHandler
	// TenantsPUTTenantHandler sets the operation handler for the p u t tenant operation
	TenantsPUTTenantHandler tenants.PUTTenantHandler
	// UsersPUTUserHandler sets the operation handler for the p u t user operation
	UsersPUTUserHandler users.PUTUserHandler
	// UsertenantcapabilitiesPUTUsertenantcapabilityHandler sets the operation handler for the p u t usertenantcapability operation
	UsertenantcapabilitiesPUTUsertenantcapabilityHandler usertenantcapabilities.PUTUsertenantcapabilityHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *RebarCoreAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *RebarCoreAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *RebarCoreAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *RebarCoreAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *RebarCoreAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *RebarCoreAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *RebarCoreAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the RebarCoreAPI
func (o *RebarCoreAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AuthorizationAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.AuthTokenAuth == nil {
		unregistered = append(unregistered, "AuthTokenAuth")
	}

	if o.AttribsDELETEAttribHandler == nil {
		unregistered = append(unregistered, "attribs.DELETEAttribHandler")
	}

	if o.AvailablehammersDELETEAvailablehammersHandler == nil {
		unregistered = append(unregistered, "availablehammers.DELETEAvailablehammersHandler")
	}

	if o.BarclampsDELETEBarclampHandler == nil {
		unregistered = append(unregistered, "barclamps.DELETEBarclampHandler")
	}

	if o.CapabilitiesDELETECapabilitiesHandler == nil {
		unregistered = append(unregistered, "capabilities.DELETECapabilitiesHandler")
	}

	if o.DeploymentrolesDELETEDeploymentrolesHandler == nil {
		unregistered = append(unregistered, "deploymentroles.DELETEDeploymentrolesHandler")
	}

	if o.DeploymentsDELETEDeploymentsHandler == nil {
		unregistered = append(unregistered, "deployments.DELETEDeploymentsHandler")
	}

	if o.DnsnameentriesDELETEDnsnameentriesHandler == nil {
		unregistered = append(unregistered, "dnsnameentries.DELETEDnsnameentriesHandler")
	}

	if o.DnsnamefiltersDELETEDnsnamefiltersHandler == nil {
		unregistered = append(unregistered, "dnsnamefilters.DELETEDnsnamefiltersHandler")
	}

	if o.EventselectorsDELETEEventselectorHandler == nil {
		unregistered = append(unregistered, "eventselectors.DELETEEventselectorHandler")
	}

	if o.EventsinksDELETEEventsinkHandler == nil {
		unregistered = append(unregistered, "eventsinks.DELETEEventsinkHandler")
	}

	if o.HammersDELETEHammerHandler == nil {
		unregistered = append(unregistered, "hammers.DELETEHammerHandler")
	}

	if o.JigsDELETEJigHandler == nil {
		unregistered = append(unregistered, "jigs.DELETEJigHandler")
	}

	if o.NetworksDELETENetworkHandler == nil {
		unregistered = append(unregistered, "networks.DELETENetworkHandler")
	}

	if o.NetworkallocationsDELETENetworkallocationHandler == nil {
		unregistered = append(unregistered, "networkallocations.DELETENetworkallocationHandler")
	}

	if o.NetworkrangesDELETENetworkrangeHandler == nil {
		unregistered = append(unregistered, "networkranges.DELETENetworkrangeHandler")
	}

	if o.NetworkroutersDELETENetworkrouterHandler == nil {
		unregistered = append(unregistered, "networkrouters.DELETENetworkrouterHandler")
	}

	if o.NodesDELETENodeHandler == nil {
		unregistered = append(unregistered, "nodes.DELETENodeHandler")
	}

	if o.NoderolesDELETENoderoleHandler == nil {
		unregistered = append(unregistered, "noderoles.DELETENoderoleHandler")
	}

	if o.ProfilesDELETEProfileHandler == nil {
		unregistered = append(unregistered, "profiles.DELETEProfileHandler")
	}

	if o.ProvidersDELETEProviderHandler == nil {
		unregistered = append(unregistered, "providers.DELETEProviderHandler")
	}

	if o.RolesDELETERolesHandler == nil {
		unregistered = append(unregistered, "roles.DELETERolesHandler")
	}

	if o.TenantsDELETETenantHandler == nil {
		unregistered = append(unregistered, "tenants.DELETETenantHandler")
	}

	if o.UsersDELETEUserHandler == nil {
		unregistered = append(unregistered, "users.DELETEUserHandler")
	}

	if o.UsertenantcapabilitiesDELETEUsertenantcapabilityHandler == nil {
		unregistered = append(unregistered, "usertenantcapabilities.DELETEUsertenantcapabilityHandler")
	}

	if o.AttribsGETAttribHandler == nil {
		unregistered = append(unregistered, "attribs.GETAttribHandler")
	}

	if o.AvailablehammersGETAvailablehammersHandler == nil {
		unregistered = append(unregistered, "availablehammers.GETAvailablehammersHandler")
	}

	if o.BarclampsGETBarclampHandler == nil {
		unregistered = append(unregistered, "barclamps.GETBarclampHandler")
	}

	if o.CapabilitiesGETCapabilitiesHandler == nil {
		unregistered = append(unregistered, "capabilities.GETCapabilitiesHandler")
	}

	if o.DeploymentrolesGETDeploymentrolesHandler == nil {
		unregistered = append(unregistered, "deploymentroles.GETDeploymentrolesHandler")
	}

	if o.DeploymentsGETDeploymentsHandler == nil {
		unregistered = append(unregistered, "deployments.GETDeploymentsHandler")
	}

	if o.DnsnameentriesGETDnsnameentriesHandler == nil {
		unregistered = append(unregistered, "dnsnameentries.GETDnsnameentriesHandler")
	}

	if o.DnsnamefiltersGETDnsnamefiltersHandler == nil {
		unregistered = append(unregistered, "dnsnamefilters.GETDnsnamefiltersHandler")
	}

	if o.EventselectorsGETEventselectorHandler == nil {
		unregistered = append(unregistered, "eventselectors.GETEventselectorHandler")
	}

	if o.EventsinksGETEventsinkHandler == nil {
		unregistered = append(unregistered, "eventsinks.GETEventsinkHandler")
	}

	if o.HammersGETHammerHandler == nil {
		unregistered = append(unregistered, "hammers.GETHammerHandler")
	}

	if o.JigsGETJigHandler == nil {
		unregistered = append(unregistered, "jigs.GETJigHandler")
	}

	if o.NetworksGETNetworkHandler == nil {
		unregistered = append(unregistered, "networks.GETNetworkHandler")
	}

	if o.NetworkallocationsGETNetworkallocationHandler == nil {
		unregistered = append(unregistered, "networkallocations.GETNetworkallocationHandler")
	}

	if o.NetworkrangesGETNetworkrangeHandler == nil {
		unregistered = append(unregistered, "networkranges.GETNetworkrangeHandler")
	}

	if o.NetworkroutersGETNetworkrouterHandler == nil {
		unregistered = append(unregistered, "networkrouters.GETNetworkrouterHandler")
	}

	if o.NodesGETNodeHandler == nil {
		unregistered = append(unregistered, "nodes.GETNodeHandler")
	}

	if o.NoderolesGETNoderoleHandler == nil {
		unregistered = append(unregistered, "noderoles.GETNoderoleHandler")
	}

	if o.ProfilesGETProfileHandler == nil {
		unregistered = append(unregistered, "profiles.GETProfileHandler")
	}

	if o.ProvidersGETProviderHandler == nil {
		unregistered = append(unregistered, "providers.GETProviderHandler")
	}

	if o.RolesGETRolesHandler == nil {
		unregistered = append(unregistered, "roles.GETRolesHandler")
	}

	if o.TenantsGETTenantHandler == nil {
		unregistered = append(unregistered, "tenants.GETTenantHandler")
	}

	if o.UsersGETUserHandler == nil {
		unregistered = append(unregistered, "users.GETUserHandler")
	}

	if o.UsertenantcapabilitiesGETUsertenantcapabilityHandler == nil {
		unregistered = append(unregistered, "usertenantcapabilities.GETUsertenantcapabilityHandler")
	}

	if o.AttribsLISTAttribsHandler == nil {
		unregistered = append(unregistered, "attribs.LISTAttribsHandler")
	}

	if o.AvailablehammersLISTAvailablehammersHandler == nil {
		unregistered = append(unregistered, "availablehammers.LISTAvailablehammersHandler")
	}

	if o.BarclampsLISTBarclampsHandler == nil {
		unregistered = append(unregistered, "barclamps.LISTBarclampsHandler")
	}

	if o.CapabilitiesLISTCapabilitiesHandler == nil {
		unregistered = append(unregistered, "capabilities.LISTCapabilitiesHandler")
	}

	if o.DeploymentrolesLISTDeploymentrolesHandler == nil {
		unregistered = append(unregistered, "deploymentroles.LISTDeploymentrolesHandler")
	}

	if o.DeploymentsLISTDeploymentsHandler == nil {
		unregistered = append(unregistered, "deployments.LISTDeploymentsHandler")
	}

	if o.DnsnameentriesLISTDnsnameentriesHandler == nil {
		unregistered = append(unregistered, "dnsnameentries.LISTDnsnameentriesHandler")
	}

	if o.DnsnamefiltersLISTDnsnamefiltersHandler == nil {
		unregistered = append(unregistered, "dnsnamefilters.LISTDnsnamefiltersHandler")
	}

	if o.EventselectorsLISTEventselectorsHandler == nil {
		unregistered = append(unregistered, "eventselectors.LISTEventselectorsHandler")
	}

	if o.EventsinksLISTEventsinksHandler == nil {
		unregistered = append(unregistered, "eventsinks.LISTEventsinksHandler")
	}

	if o.HammersLISTHammersHandler == nil {
		unregistered = append(unregistered, "hammers.LISTHammersHandler")
	}

	if o.JigsLISTJigsHandler == nil {
		unregistered = append(unregistered, "jigs.LISTJigsHandler")
	}

	if o.NetworkallocationsLISTNetworkallocationsHandler == nil {
		unregistered = append(unregistered, "networkallocations.LISTNetworkallocationsHandler")
	}

	if o.NetworkrangesLISTNetworkrangesHandler == nil {
		unregistered = append(unregistered, "networkranges.LISTNetworkrangesHandler")
	}

	if o.NetworkroutersLISTNetworkroutersHandler == nil {
		unregistered = append(unregistered, "networkrouters.LISTNetworkroutersHandler")
	}

	if o.NetworksLISTNetworksHandler == nil {
		unregistered = append(unregistered, "networks.LISTNetworksHandler")
	}

	if o.NoderolesLISTNoderolesHandler == nil {
		unregistered = append(unregistered, "noderoles.LISTNoderolesHandler")
	}

	if o.NodesLISTNodesHandler == nil {
		unregistered = append(unregistered, "nodes.LISTNodesHandler")
	}

	if o.ProfilesLISTProfilesHandler == nil {
		unregistered = append(unregistered, "profiles.LISTProfilesHandler")
	}

	if o.ProvidersLISTProvidersHandler == nil {
		unregistered = append(unregistered, "providers.LISTProvidersHandler")
	}

	if o.RolesLISTRolesHandler == nil {
		unregistered = append(unregistered, "roles.LISTRolesHandler")
	}

	if o.TenantsLISTTenantsHandler == nil {
		unregistered = append(unregistered, "tenants.LISTTenantsHandler")
	}

	if o.UsersLISTUsersHandler == nil {
		unregistered = append(unregistered, "users.LISTUsersHandler")
	}

	if o.UsertenantcapabilitiesLISTUsertenantcapabilitiesHandler == nil {
		unregistered = append(unregistered, "usertenantcapabilities.LISTUsertenantcapabilitiesHandler")
	}

	if o.NodesPATCHNodeHandler == nil {
		unregistered = append(unregistered, "nodes.PATCHNodeHandler")
	}

	if o.AttribsPOSTAttribHandler == nil {
		unregistered = append(unregistered, "attribs.POSTAttribHandler")
	}

	if o.AvailablehammersPOSTAvailablehammersHandler == nil {
		unregistered = append(unregistered, "availablehammers.POSTAvailablehammersHandler")
	}

	if o.BarclampsPOSTBarclampHandler == nil {
		unregistered = append(unregistered, "barclamps.POSTBarclampHandler")
	}

	if o.CapabilitiesPOSTCapabilitiesHandler == nil {
		unregistered = append(unregistered, "capabilities.POSTCapabilitiesHandler")
	}

	if o.DeploymentrolesPOSTDeploymentrolesHandler == nil {
		unregistered = append(unregistered, "deploymentroles.POSTDeploymentrolesHandler")
	}

	if o.DeploymentsPOSTDeploymentsHandler == nil {
		unregistered = append(unregistered, "deployments.POSTDeploymentsHandler")
	}

	if o.DnsnameentriesPOSTDnsnameentriesHandler == nil {
		unregistered = append(unregistered, "dnsnameentries.POSTDnsnameentriesHandler")
	}

	if o.DnsnamefiltersPOSTDnsnamefiltersHandler == nil {
		unregistered = append(unregistered, "dnsnamefilters.POSTDnsnamefiltersHandler")
	}

	if o.EventselectorsPOSTEventselectorHandler == nil {
		unregistered = append(unregistered, "eventselectors.POSTEventselectorHandler")
	}

	if o.EventsinksPOSTEventsinkHandler == nil {
		unregistered = append(unregistered, "eventsinks.POSTEventsinkHandler")
	}

	if o.HammersPOSTHammerHandler == nil {
		unregistered = append(unregistered, "hammers.POSTHammerHandler")
	}

	if o.JigsPOSTJigHandler == nil {
		unregistered = append(unregistered, "jigs.POSTJigHandler")
	}

	if o.NetworksPOSTNetworkHandler == nil {
		unregistered = append(unregistered, "networks.POSTNetworkHandler")
	}

	if o.NetworkallocationsPOSTNetworkallocationHandler == nil {
		unregistered = append(unregistered, "networkallocations.POSTNetworkallocationHandler")
	}

	if o.NetworkrangesPOSTNetworkrangeHandler == nil {
		unregistered = append(unregistered, "networkranges.POSTNetworkrangeHandler")
	}

	if o.NetworkroutersPOSTNetworkrouterHandler == nil {
		unregistered = append(unregistered, "networkrouters.POSTNetworkrouterHandler")
	}

	if o.NodesPOSTNodeHandler == nil {
		unregistered = append(unregistered, "nodes.POSTNodeHandler")
	}

	if o.NoderolesPOSTNoderoleHandler == nil {
		unregistered = append(unregistered, "noderoles.POSTNoderoleHandler")
	}

	if o.ProfilesPOSTProfileHandler == nil {
		unregistered = append(unregistered, "profiles.POSTProfileHandler")
	}

	if o.ProvidersPOSTProviderHandler == nil {
		unregistered = append(unregistered, "providers.POSTProviderHandler")
	}

	if o.RolesPOSTRolesHandler == nil {
		unregistered = append(unregistered, "roles.POSTRolesHandler")
	}

	if o.TenantsPOSTTenantHandler == nil {
		unregistered = append(unregistered, "tenants.POSTTenantHandler")
	}

	if o.UsersPOSTUserHandler == nil {
		unregistered = append(unregistered, "users.POSTUserHandler")
	}

	if o.UsertenantcapabilitiesPOSTUsertenantcapabilityHandler == nil {
		unregistered = append(unregistered, "usertenantcapabilities.POSTUsertenantcapabilityHandler")
	}

	if o.AttribsPUTAttribHandler == nil {
		unregistered = append(unregistered, "attribs.PUTAttribHandler")
	}

	if o.AvailablehammersPUTAvailablehammersHandler == nil {
		unregistered = append(unregistered, "availablehammers.PUTAvailablehammersHandler")
	}

	if o.BarclampsPUTBarclampHandler == nil {
		unregistered = append(unregistered, "barclamps.PUTBarclampHandler")
	}

	if o.CapabilitiesPUTCapabilitiesHandler == nil {
		unregistered = append(unregistered, "capabilities.PUTCapabilitiesHandler")
	}

	if o.DeploymentrolesPUTDeploymentrolesHandler == nil {
		unregistered = append(unregistered, "deploymentroles.PUTDeploymentrolesHandler")
	}

	if o.DeploymentsPUTDeploymentsHandler == nil {
		unregistered = append(unregistered, "deployments.PUTDeploymentsHandler")
	}

	if o.DnsnameentriesPUTDnsnameentriesHandler == nil {
		unregistered = append(unregistered, "dnsnameentries.PUTDnsnameentriesHandler")
	}

	if o.DnsnamefiltersPUTDnsnamefiltersHandler == nil {
		unregistered = append(unregistered, "dnsnamefilters.PUTDnsnamefiltersHandler")
	}

	if o.EventselectorsPUTEventselectorHandler == nil {
		unregistered = append(unregistered, "eventselectors.PUTEventselectorHandler")
	}

	if o.EventsinksPUTEventsinkHandler == nil {
		unregistered = append(unregistered, "eventsinks.PUTEventsinkHandler")
	}

	if o.HammersPUTHammerHandler == nil {
		unregistered = append(unregistered, "hammers.PUTHammerHandler")
	}

	if o.JigsPUTJigHandler == nil {
		unregistered = append(unregistered, "jigs.PUTJigHandler")
	}

	if o.NetworksPUTNetworkHandler == nil {
		unregistered = append(unregistered, "networks.PUTNetworkHandler")
	}

	if o.NetworkallocationsPUTNetworkallocationHandler == nil {
		unregistered = append(unregistered, "networkallocations.PUTNetworkallocationHandler")
	}

	if o.NetworkrangesPUTNetworkrangeHandler == nil {
		unregistered = append(unregistered, "networkranges.PUTNetworkrangeHandler")
	}

	if o.NetworkroutersPUTNetworkrouterHandler == nil {
		unregistered = append(unregistered, "networkrouters.PUTNetworkrouterHandler")
	}

	if o.NodesPUTNodeHandler == nil {
		unregistered = append(unregistered, "nodes.PUTNodeHandler")
	}

	if o.NoderolesPUTNoderoleHandler == nil {
		unregistered = append(unregistered, "noderoles.PUTNoderoleHandler")
	}

	if o.ProfilesPUTProfileHandler == nil {
		unregistered = append(unregistered, "profiles.PUTProfileHandler")
	}

	if o.ProvidersPUTProviderHandler == nil {
		unregistered = append(unregistered, "providers.PUTProviderHandler")
	}

	if o.RolesPUTRolesHandler == nil {
		unregistered = append(unregistered, "roles.PUTRolesHandler")
	}

	if o.TenantsPUTTenantHandler == nil {
		unregistered = append(unregistered, "tenants.PUTTenantHandler")
	}

	if o.UsersPUTUserHandler == nil {
		unregistered = append(unregistered, "users.PUTUserHandler")
	}

	if o.UsertenantcapabilitiesPUTUsertenantcapabilityHandler == nil {
		unregistered = append(unregistered, "usertenantcapabilities.PUTUsertenantcapabilityHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *RebarCoreAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *RebarCoreAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "Authorization":

			result[name] = security.APIKeyAuth(scheme.Name, scheme.In, o.AuthorizationAuth)

		case "auth_token":

			result[name] = security.APIKeyAuth(scheme.Name, scheme.In, o.AuthTokenAuth)

		}
	}
	return result

}

// ConsumersFor gets the consumers for the specified media types
func (o *RebarCoreAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *RebarCoreAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *RebarCoreAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the rebar core API
func (o *RebarCoreAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *RebarCoreAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/attribs/{id}"] = attribs.NewDELETEAttrib(o.context, o.AttribsDELETEAttribHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/availablehammers/{id}"] = availablehammers.NewDELETEAvailablehammers(o.context, o.AvailablehammersDELETEAvailablehammersHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/barclamps/{id}"] = barclamps.NewDELETEBarclamp(o.context, o.BarclampsDELETEBarclampHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/capabilities/{id}"] = capabilities.NewDELETECapabilities(o.context, o.CapabilitiesDELETECapabilitiesHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/deploymentroles/{id}"] = deploymentroles.NewDELETEDeploymentroles(o.context, o.DeploymentrolesDELETEDeploymentrolesHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/deployments/{id}"] = deployments.NewDELETEDeployments(o.context, o.DeploymentsDELETEDeploymentsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dnsnameentries/{id}"] = dnsnameentries.NewDELETEDnsnameentries(o.context, o.DnsnameentriesDELETEDnsnameentriesHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dnsnamefilters/{id}"] = dnsnamefilters.NewDELETEDnsnamefilters(o.context, o.DnsnamefiltersDELETEDnsnamefiltersHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/eventselectors/{id}"] = eventselectors.NewDELETEEventselector(o.context, o.EventselectorsDELETEEventselectorHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/eventsinks/{id}"] = eventsinks.NewDELETEEventsink(o.context, o.EventsinksDELETEEventsinkHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/hammers/{id}"] = hammers.NewDELETEHammer(o.context, o.HammersDELETEHammerHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/jigs/{id}"] = jigs.NewDELETEJig(o.context, o.JigsDELETEJigHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/networks/{id}"] = networks.NewDELETENetwork(o.context, o.NetworksDELETENetworkHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/networkallocations/{id}"] = networkallocations.NewDELETENetworkallocation(o.context, o.NetworkallocationsDELETENetworkallocationHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/networkranges/{id}"] = networkranges.NewDELETENetworkrange(o.context, o.NetworkrangesDELETENetworkrangeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/networkrouters/{id}"] = networkrouters.NewDELETENetworkrouter(o.context, o.NetworkroutersDELETENetworkrouterHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/nodes/{id}"] = nodes.NewDELETENode(o.context, o.NodesDELETENodeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/noderoles/{id}"] = noderoles.NewDELETENoderole(o.context, o.NoderolesDELETENoderoleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/profiles/{id}"] = profiles.NewDELETEProfile(o.context, o.ProfilesDELETEProfileHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/providers/{id}"] = providers.NewDELETEProvider(o.context, o.ProvidersDELETEProviderHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/roles/{id}"] = roles.NewDELETERoles(o.context, o.RolesDELETERolesHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tenants/{id}"] = tenants.NewDELETETenant(o.context, o.TenantsDELETETenantHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{id}"] = users.NewDELETEUser(o.context, o.UsersDELETEUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/usertenantcapabilities/{id}"] = usertenantcapabilities.NewDELETEUsertenantcapability(o.context, o.UsertenantcapabilitiesDELETEUsertenantcapabilityHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/attribs/{id}"] = attribs.NewGETAttrib(o.context, o.AttribsGETAttribHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/availablehammers/{id}"] = availablehammers.NewGETAvailablehammers(o.context, o.AvailablehammersGETAvailablehammersHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/barclamps/{id}"] = barclamps.NewGETBarclamp(o.context, o.BarclampsGETBarclampHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/capabilities/{id}"] = capabilities.NewGETCapabilities(o.context, o.CapabilitiesGETCapabilitiesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/deploymentroles/{id}"] = deploymentroles.NewGETDeploymentroles(o.context, o.DeploymentrolesGETDeploymentrolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/deployments/{id}"] = deployments.NewGETDeployments(o.context, o.DeploymentsGETDeploymentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dnsnameentries/{id}"] = dnsnameentries.NewGETDnsnameentries(o.context, o.DnsnameentriesGETDnsnameentriesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dnsnamefilters/{id}"] = dnsnamefilters.NewGETDnsnamefilters(o.context, o.DnsnamefiltersGETDnsnamefiltersHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/eventselectors/{id}"] = eventselectors.NewGETEventselector(o.context, o.EventselectorsGETEventselectorHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/eventsinks/{id}"] = eventsinks.NewGETEventsink(o.context, o.EventsinksGETEventsinkHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/hammers/{id}"] = hammers.NewGETHammer(o.context, o.HammersGETHammerHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jigs/{id}"] = jigs.NewGETJig(o.context, o.JigsGETJigHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networks/{id}"] = networks.NewGETNetwork(o.context, o.NetworksGETNetworkHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networkallocations/{id}"] = networkallocations.NewGETNetworkallocation(o.context, o.NetworkallocationsGETNetworkallocationHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networkranges/{id}"] = networkranges.NewGETNetworkrange(o.context, o.NetworkrangesGETNetworkrangeHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networkrouters/{id}"] = networkrouters.NewGETNetworkrouter(o.context, o.NetworkroutersGETNetworkrouterHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{id}"] = nodes.NewGETNode(o.context, o.NodesGETNodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/noderoles/{id}"] = noderoles.NewGETNoderole(o.context, o.NoderolesGETNoderoleHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles/{id}"] = profiles.NewGETProfile(o.context, o.ProfilesGETProfileHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/providers/{id}"] = providers.NewGETProvider(o.context, o.ProvidersGETProviderHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/roles/{id}"] = roles.NewGETRoles(o.context, o.RolesGETRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tenants/{id}"] = tenants.NewGETTenant(o.context, o.TenantsGETTenantHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}"] = users.NewGETUser(o.context, o.UsersGETUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/usertenantcapabilities/{id}"] = usertenantcapabilities.NewGETUsertenantcapability(o.context, o.UsertenantcapabilitiesGETUsertenantcapabilityHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/attribs"] = attribs.NewLISTAttribs(o.context, o.AttribsLISTAttribsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/availablehammers"] = availablehammers.NewLISTAvailablehammers(o.context, o.AvailablehammersLISTAvailablehammersHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/barclamps"] = barclamps.NewLISTBarclamps(o.context, o.BarclampsLISTBarclampsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/capabilities"] = capabilities.NewLISTCapabilities(o.context, o.CapabilitiesLISTCapabilitiesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/deploymentroles"] = deploymentroles.NewLISTDeploymentroles(o.context, o.DeploymentrolesLISTDeploymentrolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/deployments"] = deployments.NewLISTDeployments(o.context, o.DeploymentsLISTDeploymentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dnsnameentries"] = dnsnameentries.NewLISTDnsnameentries(o.context, o.DnsnameentriesLISTDnsnameentriesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dnsnamefilters"] = dnsnamefilters.NewLISTDnsnamefilters(o.context, o.DnsnamefiltersLISTDnsnamefiltersHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/eventselectors"] = eventselectors.NewLISTEventselectors(o.context, o.EventselectorsLISTEventselectorsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/eventsinks"] = eventsinks.NewLISTEventsinks(o.context, o.EventsinksLISTEventsinksHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/hammers"] = hammers.NewLISTHammers(o.context, o.HammersLISTHammersHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jigs"] = jigs.NewLISTJigs(o.context, o.JigsLISTJigsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networkallocations"] = networkallocations.NewLISTNetworkallocations(o.context, o.NetworkallocationsLISTNetworkallocationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networkranges"] = networkranges.NewLISTNetworkranges(o.context, o.NetworkrangesLISTNetworkrangesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networkrouters"] = networkrouters.NewLISTNetworkrouters(o.context, o.NetworkroutersLISTNetworkroutersHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networks"] = networks.NewLISTNetworks(o.context, o.NetworksLISTNetworksHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/noderoles"] = noderoles.NewLISTNoderoles(o.context, o.NoderolesLISTNoderolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes"] = nodes.NewLISTNodes(o.context, o.NodesLISTNodesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles"] = profiles.NewLISTProfiles(o.context, o.ProfilesLISTProfilesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/providers"] = providers.NewLISTProviders(o.context, o.ProvidersLISTProvidersHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/roles"] = roles.NewLISTRoles(o.context, o.RolesLISTRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tenants"] = tenants.NewLISTTenants(o.context, o.TenantsLISTTenantsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = users.NewLISTUsers(o.context, o.UsersLISTUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/usertenantcapabilities"] = usertenantcapabilities.NewLISTUsertenantcapabilities(o.context, o.UsertenantcapabilitiesLISTUsertenantcapabilitiesHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/nodes"] = nodes.NewPATCHNode(o.context, o.NodesPATCHNodeHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/attribs"] = attribs.NewPOSTAttrib(o.context, o.AttribsPOSTAttribHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/availablehammers"] = availablehammers.NewPOSTAvailablehammers(o.context, o.AvailablehammersPOSTAvailablehammersHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/barclamps"] = barclamps.NewPOSTBarclamp(o.context, o.BarclampsPOSTBarclampHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/capabilities"] = capabilities.NewPOSTCapabilities(o.context, o.CapabilitiesPOSTCapabilitiesHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/deploymentroles"] = deploymentroles.NewPOSTDeploymentroles(o.context, o.DeploymentrolesPOSTDeploymentrolesHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/deployments"] = deployments.NewPOSTDeployments(o.context, o.DeploymentsPOSTDeploymentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dnsnameentries"] = dnsnameentries.NewPOSTDnsnameentries(o.context, o.DnsnameentriesPOSTDnsnameentriesHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dnsnamefilters"] = dnsnamefilters.NewPOSTDnsnamefilters(o.context, o.DnsnamefiltersPOSTDnsnamefiltersHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/eventselectors"] = eventselectors.NewPOSTEventselector(o.context, o.EventselectorsPOSTEventselectorHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/eventsinks"] = eventsinks.NewPOSTEventsink(o.context, o.EventsinksPOSTEventsinkHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/hammers"] = hammers.NewPOSTHammer(o.context, o.HammersPOSTHammerHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/jigs"] = jigs.NewPOSTJig(o.context, o.JigsPOSTJigHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/networks"] = networks.NewPOSTNetwork(o.context, o.NetworksPOSTNetworkHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/networkallocations"] = networkallocations.NewPOSTNetworkallocation(o.context, o.NetworkallocationsPOSTNetworkallocationHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/networkranges"] = networkranges.NewPOSTNetworkrange(o.context, o.NetworkrangesPOSTNetworkrangeHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/networkrouters"] = networkrouters.NewPOSTNetworkrouter(o.context, o.NetworkroutersPOSTNetworkrouterHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/nodes"] = nodes.NewPOSTNode(o.context, o.NodesPOSTNodeHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/noderoles"] = noderoles.NewPOSTNoderole(o.context, o.NoderolesPOSTNoderoleHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profiles"] = profiles.NewPOSTProfile(o.context, o.ProfilesPOSTProfileHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/providers"] = providers.NewPOSTProvider(o.context, o.ProvidersPOSTProviderHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/roles"] = roles.NewPOSTRoles(o.context, o.RolesPOSTRolesHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tenants"] = tenants.NewPOSTTenant(o.context, o.TenantsPOSTTenantHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = users.NewPOSTUser(o.context, o.UsersPOSTUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/usertenantcapabilities"] = usertenantcapabilities.NewPOSTUsertenantcapability(o.context, o.UsertenantcapabilitiesPOSTUsertenantcapabilityHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/attribs/{id}"] = attribs.NewPUTAttrib(o.context, o.AttribsPUTAttribHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/availablehammers/{id}"] = availablehammers.NewPUTAvailablehammers(o.context, o.AvailablehammersPUTAvailablehammersHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/barclamps/{id}"] = barclamps.NewPUTBarclamp(o.context, o.BarclampsPUTBarclampHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/capabilities/{id}"] = capabilities.NewPUTCapabilities(o.context, o.CapabilitiesPUTCapabilitiesHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/deploymentroles/{id}"] = deploymentroles.NewPUTDeploymentroles(o.context, o.DeploymentrolesPUTDeploymentrolesHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/deployments/{id}"] = deployments.NewPUTDeployments(o.context, o.DeploymentsPUTDeploymentsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/dnsnameentries/{id}"] = dnsnameentries.NewPUTDnsnameentries(o.context, o.DnsnameentriesPUTDnsnameentriesHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/dnsnamefilters/{id}"] = dnsnamefilters.NewPUTDnsnamefilters(o.context, o.DnsnamefiltersPUTDnsnamefiltersHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/eventselectors/{id}"] = eventselectors.NewPUTEventselector(o.context, o.EventselectorsPUTEventselectorHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/eventsinks/{id}"] = eventsinks.NewPUTEventsink(o.context, o.EventsinksPUTEventsinkHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/hammers/{id}"] = hammers.NewPUTHammer(o.context, o.HammersPUTHammerHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/jigs/{id}"] = jigs.NewPUTJig(o.context, o.JigsPUTJigHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/networks/{id}"] = networks.NewPUTNetwork(o.context, o.NetworksPUTNetworkHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/networkallocations/{id}"] = networkallocations.NewPUTNetworkallocation(o.context, o.NetworkallocationsPUTNetworkallocationHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/networkranges/{id}"] = networkranges.NewPUTNetworkrange(o.context, o.NetworkrangesPUTNetworkrangeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/networkrouters/{id}"] = networkrouters.NewPUTNetworkrouter(o.context, o.NetworkroutersPUTNetworkrouterHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/nodes/{id}"] = nodes.NewPUTNode(o.context, o.NodesPUTNodeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/noderoles/{id}"] = noderoles.NewPUTNoderole(o.context, o.NoderolesPUTNoderoleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/profiles/{id}"] = profiles.NewPUTProfile(o.context, o.ProfilesPUTProfileHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/providers/{id}"] = providers.NewPUTProvider(o.context, o.ProvidersPUTProviderHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/roles/{id}"] = roles.NewPUTRoles(o.context, o.RolesPUTRolesHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tenants/{id}"] = tenants.NewPUTTenant(o.context, o.TenantsPUTTenantHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{id}"] = users.NewPUTUser(o.context, o.UsersPUTUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/usertenantcapabilities/{id}"] = usertenantcapabilities.NewPUTUsertenantcapability(o.context, o.UsertenantcapabilitiesPUTUsertenantcapabilityHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *RebarCoreAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *RebarCoreAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
