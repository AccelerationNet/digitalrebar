package networkrouters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PUTNetworkrouterHandlerFunc turns a function with the right signature into a p u t networkrouter handler
type PUTNetworkrouterHandlerFunc func(PUTNetworkrouterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PUTNetworkrouterHandlerFunc) Handle(params PUTNetworkrouterParams) middleware.Responder {
	return fn(params)
}

// PUTNetworkrouterHandler interface for that can handle valid p u t networkrouter params
type PUTNetworkrouterHandler interface {
	Handle(PUTNetworkrouterParams) middleware.Responder
}

// NewPUTNetworkrouter creates a new http.Handler for the p u t networkrouter operation
func NewPUTNetworkrouter(ctx *middleware.Context, handler PUTNetworkrouterHandler) *PUTNetworkrouter {
	return &PUTNetworkrouter{Context: ctx, Handler: handler}
}

/*PUTNetworkrouter swagger:route PUT /networkrouters/{id} Networkrouters pUTNetworkrouter

Update NetworkRouter

*/
type PUTNetworkrouter struct {
	Context *middleware.Context
	Handler PUTNetworkrouterHandler
}

func (o *PUTNetworkrouter) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPUTNetworkrouterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
