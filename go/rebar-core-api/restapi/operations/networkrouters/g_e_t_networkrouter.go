package networkrouters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETNetworkrouterHandlerFunc turns a function with the right signature into a g e t networkrouter handler
type GETNetworkrouterHandlerFunc func(GETNetworkrouterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETNetworkrouterHandlerFunc) Handle(params GETNetworkrouterParams) middleware.Responder {
	return fn(params)
}

// GETNetworkrouterHandler interface for that can handle valid g e t networkrouter params
type GETNetworkrouterHandler interface {
	Handle(GETNetworkrouterParams) middleware.Responder
}

// NewGETNetworkrouter creates a new http.Handler for the g e t networkrouter operation
func NewGETNetworkrouter(ctx *middleware.Context, handler GETNetworkrouterHandler) *GETNetworkrouter {
	return &GETNetworkrouter{Context: ctx, Handler: handler}
}

/*GETNetworkrouter swagger:route GET /networkrouters/{id} Networkrouters gETNetworkrouter

Get NetworkRouter

*/
type GETNetworkrouter struct {
	Context *middleware.Context
	Handler GETNetworkrouterHandler
}

func (o *GETNetworkrouter) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETNetworkrouterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
