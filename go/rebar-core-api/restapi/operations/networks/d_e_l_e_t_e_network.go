package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETENetworkHandlerFunc turns a function with the right signature into a d e l e t e network handler
type DELETENetworkHandlerFunc func(DELETENetworkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETENetworkHandlerFunc) Handle(params DELETENetworkParams) middleware.Responder {
	return fn(params)
}

// DELETENetworkHandler interface for that can handle valid d e l e t e network params
type DELETENetworkHandler interface {
	Handle(DELETENetworkParams) middleware.Responder
}

// NewDELETENetwork creates a new http.Handler for the d e l e t e network operation
func NewDELETENetwork(ctx *middleware.Context, handler DELETENetworkHandler) *DELETENetwork {
	return &DELETENetwork{Context: ctx, Handler: handler}
}

/*DELETENetwork swagger:route DELETE /networks/{id} Networks dELETENetwork

Delete Network

*/
type DELETENetwork struct {
	Context *middleware.Context
	Handler DELETENetworkHandler
}

func (o *DELETENetwork) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETENetworkParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
