package hammers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PUTHammerHandlerFunc turns a function with the right signature into a p u t hammer handler
type PUTHammerHandlerFunc func(PUTHammerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PUTHammerHandlerFunc) Handle(params PUTHammerParams) middleware.Responder {
	return fn(params)
}

// PUTHammerHandler interface for that can handle valid p u t hammer params
type PUTHammerHandler interface {
	Handle(PUTHammerParams) middleware.Responder
}

// NewPUTHammer creates a new http.Handler for the p u t hammer operation
func NewPUTHammer(ctx *middleware.Context, handler PUTHammerHandler) *PUTHammer {
	return &PUTHammer{Context: ctx, Handler: handler}
}

/*PUTHammer swagger:route PUT /hammers/{id} Hammers pUTHammer

Update Hammer

*/
type PUTHammer struct {
	Context *middleware.Context
	Handler PUTHammerHandler
}

func (o *PUTHammer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPUTHammerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
