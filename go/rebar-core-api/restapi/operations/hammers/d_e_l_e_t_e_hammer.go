package hammers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETEHammerHandlerFunc turns a function with the right signature into a d e l e t e hammer handler
type DELETEHammerHandlerFunc func(DELETEHammerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETEHammerHandlerFunc) Handle(params DELETEHammerParams) middleware.Responder {
	return fn(params)
}

// DELETEHammerHandler interface for that can handle valid d e l e t e hammer params
type DELETEHammerHandler interface {
	Handle(DELETEHammerParams) middleware.Responder
}

// NewDELETEHammer creates a new http.Handler for the d e l e t e hammer operation
func NewDELETEHammer(ctx *middleware.Context, handler DELETEHammerHandler) *DELETEHammer {
	return &DELETEHammer{Context: ctx, Handler: handler}
}

/*DELETEHammer swagger:route DELETE /hammers/{id} Hammers dELETEHammer

Delete Hammer

*/
type DELETEHammer struct {
	Context *middleware.Context
	Handler DELETEHammerHandler
}

func (o *DELETEHammer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETEHammerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
