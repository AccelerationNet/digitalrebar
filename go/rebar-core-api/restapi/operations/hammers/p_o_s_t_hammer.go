package hammers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTHammerHandlerFunc turns a function with the right signature into a p o s t hammer handler
type POSTHammerHandlerFunc func(POSTHammerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTHammerHandlerFunc) Handle(params POSTHammerParams) middleware.Responder {
	return fn(params)
}

// POSTHammerHandler interface for that can handle valid p o s t hammer params
type POSTHammerHandler interface {
	Handle(POSTHammerParams) middleware.Responder
}

// NewPOSTHammer creates a new http.Handler for the p o s t hammer operation
func NewPOSTHammer(ctx *middleware.Context, handler POSTHammerHandler) *POSTHammer {
	return &POSTHammer{Context: ctx, Handler: handler}
}

/*POSTHammer swagger:route POST /hammers Hammers pOSTHammer

Create Hammer

*/
type POSTHammer struct {
	Context *middleware.Context
	Handler POSTHammerHandler
}

func (o *POSTHammer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTHammerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
