package availablehammers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETEAvailablehammersHandlerFunc turns a function with the right signature into a d e l e t e availablehammers handler
type DELETEAvailablehammersHandlerFunc func(DELETEAvailablehammersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETEAvailablehammersHandlerFunc) Handle(params DELETEAvailablehammersParams) middleware.Responder {
	return fn(params)
}

// DELETEAvailablehammersHandler interface for that can handle valid d e l e t e availablehammers params
type DELETEAvailablehammersHandler interface {
	Handle(DELETEAvailablehammersParams) middleware.Responder
}

// NewDELETEAvailablehammers creates a new http.Handler for the d e l e t e availablehammers operation
func NewDELETEAvailablehammers(ctx *middleware.Context, handler DELETEAvailablehammersHandler) *DELETEAvailablehammers {
	return &DELETEAvailablehammers{Context: ctx, Handler: handler}
}

/*DELETEAvailablehammers swagger:route DELETE /availablehammers/{id} Availablehammers dELETEAvailablehammers

Delete AvailableHammers

*/
type DELETEAvailablehammers struct {
	Context *middleware.Context
	Handler DELETEAvailablehammersHandler
}

func (o *DELETEAvailablehammers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETEAvailablehammersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
