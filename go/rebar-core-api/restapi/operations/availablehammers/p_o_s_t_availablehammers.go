package availablehammers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTAvailablehammersHandlerFunc turns a function with the right signature into a p o s t availablehammers handler
type POSTAvailablehammersHandlerFunc func(POSTAvailablehammersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTAvailablehammersHandlerFunc) Handle(params POSTAvailablehammersParams) middleware.Responder {
	return fn(params)
}

// POSTAvailablehammersHandler interface for that can handle valid p o s t availablehammers params
type POSTAvailablehammersHandler interface {
	Handle(POSTAvailablehammersParams) middleware.Responder
}

// NewPOSTAvailablehammers creates a new http.Handler for the p o s t availablehammers operation
func NewPOSTAvailablehammers(ctx *middleware.Context, handler POSTAvailablehammersHandler) *POSTAvailablehammers {
	return &POSTAvailablehammers{Context: ctx, Handler: handler}
}

/*POSTAvailablehammers swagger:route POST /availablehammers Availablehammers pOSTAvailablehammers

Create AvailableHammers

*/
type POSTAvailablehammers struct {
	Context *middleware.Context
	Handler POSTAvailablehammersHandler
}

func (o *POSTAvailablehammers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTAvailablehammersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
