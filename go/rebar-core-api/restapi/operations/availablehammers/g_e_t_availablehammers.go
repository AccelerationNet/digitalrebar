package availablehammers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETAvailablehammersHandlerFunc turns a function with the right signature into a g e t availablehammers handler
type GETAvailablehammersHandlerFunc func(GETAvailablehammersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETAvailablehammersHandlerFunc) Handle(params GETAvailablehammersParams) middleware.Responder {
	return fn(params)
}

// GETAvailablehammersHandler interface for that can handle valid g e t availablehammers params
type GETAvailablehammersHandler interface {
	Handle(GETAvailablehammersParams) middleware.Responder
}

// NewGETAvailablehammers creates a new http.Handler for the g e t availablehammers operation
func NewGETAvailablehammers(ctx *middleware.Context, handler GETAvailablehammersHandler) *GETAvailablehammers {
	return &GETAvailablehammers{Context: ctx, Handler: handler}
}

/*GETAvailablehammers swagger:route GET /availablehammers/{id} Availablehammers gETAvailablehammers

Get AvailableHammers

*/
type GETAvailablehammers struct {
	Context *middleware.Context
	Handler GETAvailablehammersHandler
}

func (o *GETAvailablehammers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETAvailablehammersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
