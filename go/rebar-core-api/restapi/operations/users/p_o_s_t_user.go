package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTUserHandlerFunc turns a function with the right signature into a p o s t user handler
type POSTUserHandlerFunc func(POSTUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTUserHandlerFunc) Handle(params POSTUserParams) middleware.Responder {
	return fn(params)
}

// POSTUserHandler interface for that can handle valid p o s t user params
type POSTUserHandler interface {
	Handle(POSTUserParams) middleware.Responder
}

// NewPOSTUser creates a new http.Handler for the p o s t user operation
func NewPOSTUser(ctx *middleware.Context, handler POSTUserHandler) *POSTUser {
	return &POSTUser{Context: ctx, Handler: handler}
}

/*POSTUser swagger:route POST /users Users pOSTUser

Create User

*/
type POSTUser struct {
	Context *middleware.Context
	Handler POSTUserHandler
}

func (o *POSTUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
