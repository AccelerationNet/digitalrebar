package usertenantcapabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PUTUsertenantcapabilityHandlerFunc turns a function with the right signature into a p u t usertenantcapability handler
type PUTUsertenantcapabilityHandlerFunc func(PUTUsertenantcapabilityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PUTUsertenantcapabilityHandlerFunc) Handle(params PUTUsertenantcapabilityParams) middleware.Responder {
	return fn(params)
}

// PUTUsertenantcapabilityHandler interface for that can handle valid p u t usertenantcapability params
type PUTUsertenantcapabilityHandler interface {
	Handle(PUTUsertenantcapabilityParams) middleware.Responder
}

// NewPUTUsertenantcapability creates a new http.Handler for the p u t usertenantcapability operation
func NewPUTUsertenantcapability(ctx *middleware.Context, handler PUTUsertenantcapabilityHandler) *PUTUsertenantcapability {
	return &PUTUsertenantcapability{Context: ctx, Handler: handler}
}

/*PUTUsertenantcapability swagger:route PUT /usertenantcapabilities/{id} Usertenantcapabilities pUTUsertenantcapability

Update UserTenantCapability

*/
type PUTUsertenantcapability struct {
	Context *middleware.Context
	Handler PUTUsertenantcapabilityHandler
}

func (o *PUTUsertenantcapability) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPUTUsertenantcapabilityParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
