package deploymentroles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTDeploymentrolesHandlerFunc turns a function with the right signature into a p o s t deploymentroles handler
type POSTDeploymentrolesHandlerFunc func(POSTDeploymentrolesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTDeploymentrolesHandlerFunc) Handle(params POSTDeploymentrolesParams) middleware.Responder {
	return fn(params)
}

// POSTDeploymentrolesHandler interface for that can handle valid p o s t deploymentroles params
type POSTDeploymentrolesHandler interface {
	Handle(POSTDeploymentrolesParams) middleware.Responder
}

// NewPOSTDeploymentroles creates a new http.Handler for the p o s t deploymentroles operation
func NewPOSTDeploymentroles(ctx *middleware.Context, handler POSTDeploymentrolesHandler) *POSTDeploymentroles {
	return &POSTDeploymentroles{Context: ctx, Handler: handler}
}

/*POSTDeploymentroles swagger:route POST /deploymentroles Deploymentroles pOSTDeploymentroles

Create Deploymentroles

*/
type POSTDeploymentroles struct {
	Context *middleware.Context
	Handler POSTDeploymentrolesHandler
}

func (o *POSTDeploymentroles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTDeploymentrolesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
