package deploymentroles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETDeploymentrolesHandlerFunc turns a function with the right signature into a g e t deploymentroles handler
type GETDeploymentrolesHandlerFunc func(GETDeploymentrolesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETDeploymentrolesHandlerFunc) Handle(params GETDeploymentrolesParams) middleware.Responder {
	return fn(params)
}

// GETDeploymentrolesHandler interface for that can handle valid g e t deploymentroles params
type GETDeploymentrolesHandler interface {
	Handle(GETDeploymentrolesParams) middleware.Responder
}

// NewGETDeploymentroles creates a new http.Handler for the g e t deploymentroles operation
func NewGETDeploymentroles(ctx *middleware.Context, handler GETDeploymentrolesHandler) *GETDeploymentroles {
	return &GETDeploymentroles{Context: ctx, Handler: handler}
}

/*GETDeploymentroles swagger:route GET /deploymentroles/{id} Deploymentroles gETDeploymentroles

Get Deploymentroles

*/
type GETDeploymentroles struct {
	Context *middleware.Context
	Handler GETDeploymentrolesHandler
}

func (o *GETDeploymentroles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETDeploymentrolesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
