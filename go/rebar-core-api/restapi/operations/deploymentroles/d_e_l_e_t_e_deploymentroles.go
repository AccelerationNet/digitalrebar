package deploymentroles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETEDeploymentrolesHandlerFunc turns a function with the right signature into a d e l e t e deploymentroles handler
type DELETEDeploymentrolesHandlerFunc func(DELETEDeploymentrolesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETEDeploymentrolesHandlerFunc) Handle(params DELETEDeploymentrolesParams) middleware.Responder {
	return fn(params)
}

// DELETEDeploymentrolesHandler interface for that can handle valid d e l e t e deploymentroles params
type DELETEDeploymentrolesHandler interface {
	Handle(DELETEDeploymentrolesParams) middleware.Responder
}

// NewDELETEDeploymentroles creates a new http.Handler for the d e l e t e deploymentroles operation
func NewDELETEDeploymentroles(ctx *middleware.Context, handler DELETEDeploymentrolesHandler) *DELETEDeploymentroles {
	return &DELETEDeploymentroles{Context: ctx, Handler: handler}
}

/*DELETEDeploymentroles swagger:route DELETE /deploymentroles/{id} Deploymentroles dELETEDeploymentroles

Delete Deploymentroles

*/
type DELETEDeploymentroles struct {
	Context *middleware.Context
	Handler DELETEDeploymentrolesHandler
}

func (o *DELETEDeploymentroles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETEDeploymentrolesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
