package deploymentroles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PUTDeploymentrolesHandlerFunc turns a function with the right signature into a p u t deploymentroles handler
type PUTDeploymentrolesHandlerFunc func(PUTDeploymentrolesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PUTDeploymentrolesHandlerFunc) Handle(params PUTDeploymentrolesParams) middleware.Responder {
	return fn(params)
}

// PUTDeploymentrolesHandler interface for that can handle valid p u t deploymentroles params
type PUTDeploymentrolesHandler interface {
	Handle(PUTDeploymentrolesParams) middleware.Responder
}

// NewPUTDeploymentroles creates a new http.Handler for the p u t deploymentroles operation
func NewPUTDeploymentroles(ctx *middleware.Context, handler PUTDeploymentrolesHandler) *PUTDeploymentroles {
	return &PUTDeploymentroles{Context: ctx, Handler: handler}
}

/*PUTDeploymentroles swagger:route PUT /deploymentroles/{id} Deploymentroles pUTDeploymentroles

Update Deploymentroles

*/
type PUTDeploymentroles struct {
	Context *middleware.Context
	Handler PUTDeploymentrolesHandler
}

func (o *PUTDeploymentroles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPUTDeploymentrolesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
