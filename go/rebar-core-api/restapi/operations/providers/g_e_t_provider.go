package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETProviderHandlerFunc turns a function with the right signature into a g e t provider handler
type GETProviderHandlerFunc func(GETProviderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETProviderHandlerFunc) Handle(params GETProviderParams) middleware.Responder {
	return fn(params)
}

// GETProviderHandler interface for that can handle valid g e t provider params
type GETProviderHandler interface {
	Handle(GETProviderParams) middleware.Responder
}

// NewGETProvider creates a new http.Handler for the g e t provider operation
func NewGETProvider(ctx *middleware.Context, handler GETProviderHandler) *GETProvider {
	return &GETProvider{Context: ctx, Handler: handler}
}

/*GETProvider swagger:route GET /providers/{id} Providers gETProvider

Get Provider

*/
type GETProvider struct {
	Context *middleware.Context
	Handler GETProviderHandler
}

func (o *GETProvider) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETProviderParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
