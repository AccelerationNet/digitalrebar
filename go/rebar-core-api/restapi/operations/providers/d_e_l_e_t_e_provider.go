package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DELETEProviderHandlerFunc turns a function with the right signature into a d e l e t e provider handler
type DELETEProviderHandlerFunc func(DELETEProviderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DELETEProviderHandlerFunc) Handle(params DELETEProviderParams) middleware.Responder {
	return fn(params)
}

// DELETEProviderHandler interface for that can handle valid d e l e t e provider params
type DELETEProviderHandler interface {
	Handle(DELETEProviderParams) middleware.Responder
}

// NewDELETEProvider creates a new http.Handler for the d e l e t e provider operation
func NewDELETEProvider(ctx *middleware.Context, handler DELETEProviderHandler) *DELETEProvider {
	return &DELETEProvider{Context: ctx, Handler: handler}
}

/*DELETEProvider swagger:route DELETE /providers/{id} Providers dELETEProvider

Delete Provider

*/
type DELETEProvider struct {
	Context *middleware.Context
	Handler DELETEProviderHandler
}

func (o *DELETEProvider) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDELETEProviderParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
