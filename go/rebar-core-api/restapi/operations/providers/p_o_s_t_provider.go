package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// POSTProviderHandlerFunc turns a function with the right signature into a p o s t provider handler
type POSTProviderHandlerFunc func(POSTProviderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn POSTProviderHandlerFunc) Handle(params POSTProviderParams) middleware.Responder {
	return fn(params)
}

// POSTProviderHandler interface for that can handle valid p o s t provider params
type POSTProviderHandler interface {
	Handle(POSTProviderParams) middleware.Responder
}

// NewPOSTProvider creates a new http.Handler for the p o s t provider operation
func NewPOSTProvider(ctx *middleware.Context, handler POSTProviderHandler) *POSTProvider {
	return &POSTProvider{Context: ctx, Handler: handler}
}

/*POSTProvider swagger:route POST /providers Providers pOSTProvider

Create Provider

*/
type POSTProvider struct {
	Context *middleware.Context
	Handler POSTProviderHandler
}

func (o *POSTProvider) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPOSTProviderParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
