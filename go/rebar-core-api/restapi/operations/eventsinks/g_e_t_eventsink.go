package eventsinks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GETEventsinkHandlerFunc turns a function with the right signature into a g e t eventsink handler
type GETEventsinkHandlerFunc func(GETEventsinkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GETEventsinkHandlerFunc) Handle(params GETEventsinkParams) middleware.Responder {
	return fn(params)
}

// GETEventsinkHandler interface for that can handle valid g e t eventsink params
type GETEventsinkHandler interface {
	Handle(GETEventsinkParams) middleware.Responder
}

// NewGETEventsink creates a new http.Handler for the g e t eventsink operation
func NewGETEventsink(ctx *middleware.Context, handler GETEventsinkHandler) *GETEventsink {
	return &GETEventsink{Context: ctx, Handler: handler}
}

/*GETEventsink swagger:route GET /eventsinks/{id} Eventsinks gETEventsink

Get EventSink

*/
type GETEventsink struct {
	Context *middleware.Context
	Handler GETEventsinkHandler
}

func (o *GETEventsink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGETEventsinkParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
