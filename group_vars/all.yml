#
# This file contains initial variable configuration for ansible playbook
# deployment of DigitalRebar
#

#
# Workloads
#   Value: A list of workloads to include for this installation
#   Uncomment elements to add.  These are passed to the compose
#   setup script
#   Default: provisioner, kubernetes
#
#
# Provisioner - workload that provides the tools to do
#   node discovery and OS installation.
#
#  - provisioner
#
# Logging - workload that adds containers that do logstach,
#   elasticsearch, and kibana on the admin containers
#
#  - logging
#
# Debug - add cadvisor to the admin container set to debug
#   potential container resource issues.
#
#  - debug
#
# Node - add the private test node workload.
#   Allows a container (or set with scale) to
#   be added to DR after installation.
#  - node
# 
# Kubernetes - Used to deploy a kubernetes cluster
#   Builds an etcd cluster
#   A set of kubernetes masters
#   Adds minions.
#
#  - kubernetes
#
# Ceph - Used to deploy a simple ceph cluster
#
#  - ceph
#
# Hardware - Provides IPMI, BIOS, and Raid 
#   configuration tools
#
#  - hardware
#
# Packstack - creates an RDO-based environment
#   that allows for running packstack to setup
#   openstack on provided nodes
#
#  - packstack
#
# Docker - deploy docker-engine to a node
#
#  - docker
#
# Docker-swarm - Deploy docker swarm to aggregate
#   a set of nodes that have docker deployed.
#
#  - docker-swarm       # Needs rackn access
#
# Enterprise - RackN added branding and additional
#   features.
#
#  - enterprise         # Needs rackn access
#
# Mesosphere - Workload to deploy mesosphere
#
#  - mesosphere         # Needs rackn access
#
# Burnin - RackN provided tools to provide a 
#   burnin test/stress environment
#
#  - burnin             # Needs rackn access
#
# StackEngine - RackN provided workloaded that
#   can deploy a licensed copy of StackEngine.
#
#  - stackengine        # Needs rackn access
#
#
workloads:
  - provisioner
  - kubernetes

#
# Access keys for repos
#
access:
  rackn:
    user: galthaus
    password: galthaus_password

#
# Access Modes
#   The admin containers can be setup to use one of the Host's IP as an access point or
#   another IP that is local to the host and bridged into other environments.  The latter
#   case uses a Forwarder to front the other containers.
#
# access_mode:  HOST|FORWARDER
#
#   Two additional variables are used to define the access points.
#
# external_ip = The CIDR IP for the external access point.
# forwarder_ip = The CIDR IP of the forwarder if forwarding is used.
#
#   When using FORWARDER access mode, external_ip should match forwarder_ip and
#   the forwarder_ip will (but not required) to be on an admin network.
#
# This is the default that matches original install implementations
#
access_mode: FORWARDER
external_ip: 192.168.124.11/24
forwarder_ip: 192.168.124.11/24


# Used to add kvm tools to the host for provisining testing
# Values:
#   false - Default - Doesn't put tools in place
#   true  - ensures that required tools will be installed
# Not available for MAC Docker environment
# kvm_tools: true

# Interface to bridge to docker0 for remote provisioning
# Not available for MAC Docker environment
# bridge_to_docker: eth1

# bridge CIDR IP - This IP will be added to docker0 bridge
# In some cases, it is good to have a bridge IP to use for accessing the admin network.
# bridge_ip: 192.168.124.200/24

